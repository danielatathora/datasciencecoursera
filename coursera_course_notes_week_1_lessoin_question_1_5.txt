
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> package("swirl")
Error in package("swirl") : could not find function "package"
> install.packages("swirl")
--- Please select a CRAN mirror for use in this session ---
also installing the dependencies ‘utf8’, ‘pillar’, ‘pkgconfig’, ‘vctrs’, ‘sys’, ‘rprojroot’, ‘rstudioapi’, ‘diffobj’, ‘fansi’, ‘rematch2’, ‘tibble’, ‘askpass’, ‘glue’, ‘magrittr’, ‘stringi’, ‘brio’, ‘callr’, ‘cli’, ‘crayon’, ‘desc’, ‘ellipsis’, ‘evaluate’, ‘jsonlite’, ‘lifecycle’, ‘pkgload’, ‘praise’, ‘processx’, ‘ps’, ‘R6’, ‘rlang’, ‘waldo’, ‘withr’, ‘curl’, ‘mime’, ‘openssl’, ‘bitops’, ‘stringr’, ‘testthat’, ‘httr’, ‘yaml’, ‘RCurl’, ‘digest’

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/utf8_1.2.2.zip'
Content type 'application/zip' length 209863 bytes (204 KB)
downloaded 204 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/pillar_1.6.2.zip'
Content type 'application/zip' length 1071737 bytes (1.0 MB)
downloaded 1.0 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/pkgconfig_2.0.3.zip'
Content type 'application/zip' length 22291 bytes (21 KB)
downloaded 21 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/vctrs_0.3.8.zip'
Content type 'application/zip' length 1252660 bytes (1.2 MB)
downloaded 1.2 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/sys_3.4.zip'
Content type 'application/zip' length 59372 bytes (57 KB)
downloaded 57 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/rprojroot_2.0.2.zip'
Content type 'application/zip' length 105027 bytes (102 KB)
downloaded 102 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/rstudioapi_0.13.zip'
Content type 'application/zip' length 302154 bytes (295 KB)
downloaded 295 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/diffobj_0.3.4.zip'
Content type 'application/zip' length 994155 bytes (970 KB)
downloaded 970 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/fansi_0.5.0.zip'
Content type 'application/zip' length 248066 bytes (242 KB)
downloaded 242 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/rematch2_2.1.2.zip'
Content type 'application/zip' length 47533 bytes (46 KB)
downloaded 46 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/tibble_3.1.3.zip'
Content type 'application/zip' length 835410 bytes (815 KB)
downloaded 815 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/askpass_1.1.zip'
Content type 'application/zip' length 243584 bytes (237 KB)
downloaded 237 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/glue_1.4.2.zip'
Content type 'application/zip' length 154955 bytes (151 KB)
downloaded 151 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/magrittr_2.0.1.zip'
Content type 'application/zip' length 236043 bytes (230 KB)
downloaded 230 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/stringi_1.7.3.zip'
Content type 'application/zip' length 16452715 bytes (15.7 MB)
downloaded 15.7 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/brio_1.1.2.zip'
Content type 'application/zip' length 46344 bytes (45 KB)
downloaded 45 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/callr_3.7.0.zip'
Content type 'application/zip' length 439010 bytes (428 KB)
downloaded 428 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/cli_3.0.1.zip'
Content type 'application/zip' length 758127 bytes (740 KB)
downloaded 740 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/crayon_1.4.1.zip'
Content type 'application/zip' length 141633 bytes (138 KB)
downloaded 138 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/desc_1.3.0.zip'
Content type 'application/zip' length 530018 bytes (517 KB)
downloaded 517 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/ellipsis_0.3.2.zip'
Content type 'application/zip' length 49143 bytes (47 KB)
downloaded 47 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/evaluate_0.14.zip'
Content type 'application/zip' length 76631 bytes (74 KB)
downloaded 74 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/jsonlite_1.7.2.zip'
Content type 'application/zip' length 544266 bytes (531 KB)
downloaded 531 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/lifecycle_1.0.0.zip'
Content type 'application/zip' length 111091 bytes (108 KB)
downloaded 108 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/pkgload_1.2.1.zip'
Content type 'application/zip' length 154263 bytes (150 KB)
downloaded 150 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/praise_1.0.0.zip'
Content type 'application/zip' length 19718 bytes (19 KB)
downloaded 19 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/processx_3.5.2.zip'
Content type 'application/zip' length 1246194 bytes (1.2 MB)
downloaded 1.2 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/ps_1.6.0.zip'
Content type 'application/zip' length 775611 bytes (757 KB)
downloaded 757 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/R6_2.5.0.zip'
Content type 'application/zip' length 84106 bytes (82 KB)
downloaded 82 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/rlang_0.4.11.zip'
Content type 'application/zip' length 1198277 bytes (1.1 MB)
downloaded 1.1 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/waldo_0.2.5.zip'
Content type 'application/zip' length 72496 bytes (70 KB)
downloaded 70 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/withr_2.4.2.zip'
Content type 'application/zip' length 212668 bytes (207 KB)
downloaded 207 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/curl_4.3.2.zip'
Content type 'application/zip' length 4322385 bytes (4.1 MB)
downloaded 4.1 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/mime_0.11.zip'
Content type 'application/zip' length 47945 bytes (46 KB)
downloaded 46 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/openssl_1.4.4.zip'
Content type 'application/zip' length 4101844 bytes (3.9 MB)
downloaded 3.9 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/bitops_1.0-7.zip'
Content type 'application/zip' length 42470 bytes (41 KB)
downloaded 41 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/stringr_1.4.0.zip'
Content type 'application/zip' length 216673 bytes (211 KB)
downloaded 211 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/testthat_3.0.4.zip'
Content type 'application/zip' length 2506023 bytes (2.4 MB)
downloaded 2.4 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/httr_1.4.2.zip'
Content type 'application/zip' length 518356 bytes (506 KB)
downloaded 506 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/yaml_2.2.1.zip'
Content type 'application/zip' length 207808 bytes (202 KB)
downloaded 202 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/RCurl_1.98-1.4.zip'
Content type 'application/zip' length 3071768 bytes (2.9 MB)
downloaded 2.9 MB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/digest_0.6.27.zip'
Content type 'application/zip' length 268501 bytes (262 KB)
downloaded 262 KB

trying URL 'https://cran.ma.imperial.ac.uk/bin/windows/contrib/4.1/swirl_2.4.5.zip'
Content type 'application/zip' length 350074 bytes (341 KB)
downloaded 341 KB

package ‘utf8’ successfully unpacked and MD5 sums checked
package ‘pillar’ successfully unpacked and MD5 sums checked
package ‘pkgconfig’ successfully unpacked and MD5 sums checked
package ‘vctrs’ successfully unpacked and MD5 sums checked
package ‘sys’ successfully unpacked and MD5 sums checked
package ‘rprojroot’ successfully unpacked and MD5 sums checked
package ‘rstudioapi’ successfully unpacked and MD5 sums checked
package ‘diffobj’ successfully unpacked and MD5 sums checked
package ‘fansi’ successfully unpacked and MD5 sums checked
package ‘rematch2’ successfully unpacked and MD5 sums checked
package ‘tibble’ successfully unpacked and MD5 sums checked
package ‘askpass’ successfully unpacked and MD5 sums checked
package ‘glue’ successfully unpacked and MD5 sums checked
package ‘magrittr’ successfully unpacked and MD5 sums checked
package ‘stringi’ successfully unpacked and MD5 sums checked
package ‘brio’ successfully unpacked and MD5 sums checked
package ‘callr’ successfully unpacked and MD5 sums checked
package ‘cli’ successfully unpacked and MD5 sums checked
package ‘crayon’ successfully unpacked and MD5 sums checked
package ‘desc’ successfully unpacked and MD5 sums checked
package ‘ellipsis’ successfully unpacked and MD5 sums checked
package ‘evaluate’ successfully unpacked and MD5 sums checked
package ‘jsonlite’ successfully unpacked and MD5 sums checked
package ‘lifecycle’ successfully unpacked and MD5 sums checked
package ‘pkgload’ successfully unpacked and MD5 sums checked
package ‘praise’ successfully unpacked and MD5 sums checked
package ‘processx’ successfully unpacked and MD5 sums checked
package ‘ps’ successfully unpacked and MD5 sums checked
package ‘R6’ successfully unpacked and MD5 sums checked
package ‘rlang’ successfully unpacked and MD5 sums checked
package ‘waldo’ successfully unpacked and MD5 sums checked
package ‘withr’ successfully unpacked and MD5 sums checked
package ‘curl’ successfully unpacked and MD5 sums checked
package ‘mime’ successfully unpacked and MD5 sums checked
package ‘openssl’ successfully unpacked and MD5 sums checked
package ‘bitops’ successfully unpacked and MD5 sums checked
package ‘stringr’ successfully unpacked and MD5 sums checked
package ‘testthat’ successfully unpacked and MD5 sums checked
package ‘httr’ successfully unpacked and MD5 sums checked
package ‘yaml’ successfully unpacked and MD5 sums checked
package ‘RCurl’ successfully unpacked and MD5 sums checked
package ‘digest’ successfully unpacked and MD5 sums checked
package ‘swirl’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
        C:\Users\daniel.drennan\AppData\Local\Temp\RtmpS8n1av\downloaded_packages
> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Daniel

| Thanks, Daniel. Let's cover a couple of quick housekeeping items before we
| begin our first lesson. First of all, you should know that when you see
| '...', that means you should press Enter when you are done reading and ready
| to continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to
| select from a list, that means it's your turn to enter a response, then press
| Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 1

| You can exit swirl and return to the R prompt (>) at any time by pressing the
| Esc key. If you are already at the prompt, type bye() to exit and save your
| progress. When you exit properly, you'll see a short message letting you know
| you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

...

| To begin, you must install a course. I can install a course for you from the
| internet, or I can send you to a web page
| (https://github.com/swirldev/swirl_courses) which will provide course options
| and directions for installing courses yourself. (If you are not connected to
| the internet, type 0 to exit.)

1: R Programming: The basics of programming in R
2: Regression Models: The basics of regression modeling in R
3: Statistical Inference: The basics of statistical inference in R
4: Exploratory Data Analysis: The basics of exploring data in R
5: Don't install anything for me. I'll do it myself.

Selection: 4

  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |                                                                      |   1%
  |                                                                            
  |=                                                                     |   1%
  |                                                                            
  |=                                                                     |   2%
  |                                                                            
  |==                                                                    |   2%
  |                                                                            
  |==                                                                    |   3%
  |                                                                            
  |==                                                                    |   4%
  |                                                                            
  |===                                                                   |   4%
  |                                                                            
  |===                                                                   |   5%
  |                                                                            
  |====                                                                  |   5%
  |                                                                            
  |====                                                                  |   6%
  |                                                                            
  |=====                                                                 |   6%
  |                                                                            
  |=====                                                                 |   7%
  |                                                                            
  |=====                                                                 |   8%
  |                                                                            
  |======                                                                |   8%
  |                                                                            
  |======                                                                |   9%
  |                                                                            
  |=======                                                               |   9%
  |                                                                            
  |=======                                                               |  10%
  |                                                                            
  |=======                                                               |  11%
  |                                                                            
  |========                                                              |  11%
  |                                                                            
  |========                                                              |  12%
  |                                                                            
  |=========                                                             |  12%
  |                                                                            
  |=========                                                             |  13%
  |                                                                            
  |=========                                                             |  14%
  |                                                                            
  |==========                                                            |  14%
  |                                                                            
  |==========                                                            |  15%
  |                                                                            
  |===========                                                           |  15%
  |                                                                            
  |===========                                                           |  16%
  |                                                                            
  |============                                                          |  16%
  |                                                                            
  |============                                                          |  17%
  |                                                                            
  |============                                                          |  18%
  |                                                                            
  |=============                                                         |  18%
  |                                                                            
  |=============                                                         |  19%
  |                                                                            
  |==============                                                        |  19%
  |                                                                            
  |==============                                                        |  20%
  |                                                                            
  |==============                                                        |  21%
  |                                                                            
  |===============                                                       |  21%
  |                                                                            
  |===============                                                       |  22%
  |                                                                            
  |================                                                      |  22%
  |                                                                            
  |================                                                      |  23%
  |                                                                            
  |================                                                      |  24%
  |                                                                            
  |=================                                                     |  24%
  |                                                                            
  |=================                                                     |  25%
  |                                                                            
  |==================                                                    |  25%
  |                                                                            
  |==================                                                    |  26%
  |                                                                            
  |===================                                                   |  26%
  |                                                                            
  |===================                                                   |  27%
  |                                                                            
  |===================                                                   |  28%
  |                                                                            
  |====================                                                  |  28%
  |                                                                            
  |====================                                                  |  29%
  |                                                                            
  |=====================                                                 |  29%
  |                                                                            
  |=====================                                                 |  30%
  |                                                                            
  |=====================                                                 |  31%
  |                                                                            
  |======================                                                |  31%
  |                                                                            
  |======================                                                |  32%
  |                                                                            
  |=======================                                               |  32%
  |                                                                            
  |=======================                                               |  33%
  |                                                                            
  |=======================                                               |  34%
  |                                                                            
  |========================                                              |  34%
  |                                                                            
  |========================                                              |  35%
  |                                                                            
  |=========================                                             |  35%
  |                                                                            
  |=========================                                             |  36%
  |                                                                            
  |==========================                                            |  36%
  |                                                                            
  |==========================                                            |  37%
  |                                                                            
  |==========================                                            |  38%
  |                                                                            
  |===========================                                           |  38%
  |                                                                            
  |===========================                                           |  39%
  |                                                                            
  |============================                                          |  39%
  |                                                                            
  |============================                                          |  40%
  |                                                                            
  |============================                                          |  41%
  |                                                                            
  |=============================                                         |  41%
  |                                                                            
  |=============================                                         |  42%
  |                                                                            
  |==============================                                        |  42%
  |                                                                            
  |==============================                                        |  43%
  |                                                                            
  |==============================                                        |  44%
  |                                                                            
  |===============================                                       |  44%
  |                                                                            
  |===============================                                       |  45%
  |                                                                            
  |================================                                      |  45%
  |                                                                            
  |================================                                      |  46%
  |                                                                            
  |=================================                                     |  46%
  |                                                                            
  |=================================                                     |  47%
  |                                                                            
  |=================================                                     |  48%
  |                                                                            
  |==================================                                    |  48%
  |                                                                            
  |==================================                                    |  49%
  |                                                                            
  |===================================                                   |  49%
  |                                                                            
  |===================================                                   |  50%
  |                                                                            
  |===================================                                   |  51%
  |                                                                            
  |====================================                                  |  51%
  |                                                                            
  |====================================                                  |  52%
  |                                                                            
  |=====================================                                 |  52%
  |                                                                            
  |=====================================                                 |  53%
  |                                                                            
  |=====================================                                 |  54%
  |                                                                            
  |======================================                                |  54%
  |                                                                            
  |======================================                                |  55%
  |                                                                            
  |=======================================                               |  55%
  |                                                                            
  |=======================================                               |  56%
  |                                                                            
  |========================================                              |  56%
  |                                                                            
  |========================================                              |  57%
  |                                                                            
  |========================================                              |  58%
  |                                                                            
  |=========================================                             |  58%
  |                                                                            
  |=========================================                             |  59%
  |                                                                            
  |==========================================                            |  59%
  |                                                                            
  |==========================================                            |  60%
  |                                                                            
  |==========================================                            |  61%
  |                                                                            
  |===========================================                           |  61%
  |                                                                            
  |===========================================                           |  62%
  |                                                                            
  |============================================                          |  62%
  |                                                                            
  |============================================                          |  63%
  |                                                                            
  |============================================                          |  64%
  |                                                                            
  |=============================================                         |  64%
  |                                                                            
  |=============================================                         |  65%
  |                                                                            
  |==============================================                        |  65%
  |                                                                            
  |==============================================                        |  66%
  |                                                                            
  |===============================================                       |  66%
  |                                                                            
  |===============================================                       |  67%
  |                                                                            
  |===============================================                       |  68%
  |                                                                            
  |================================================                      |  68%
  |                                                                            
  |================================================                      |  69%
  |                                                                            
  |=================================================                     |  69%
  |                                                                            
  |=================================================                     |  70%
  |                                                                            
  |=================================================                     |  71%
  |                                                                            
  |==================================================                    |  71%
  |                                                                            
  |==================================================                    |  72%
  |                                                                            
  |===================================================                   |  72%
  |                                                                            
  |===================================================                   |  73%
  |                                                                            
  |===================================================                   |  74%
  |                                                                            
  |====================================================                  |  74%
  |                                                                            
  |====================================================                  |  75%
  |                                                                            
  |=====================================================                 |  75%
  |                                                                            
  |=====================================================                 |  76%
  |                                                                            
  |======================================================                |  76%
  |                                                                            
  |======================================================                |  77%
  |                                                                            
  |======================================================                |  78%
  |                                                                            
  |=======================================================               |  78%
  |                                                                            
  |=======================================================               |  79%
  |                                                                            
  |========================================================              |  79%
  |                                                                            
  |========================================================              |  80%
  |                                                                            
  |========================================================              |  81%
  |                                                                            
  |=========================================================             |  81%
  |                                                                            
  |=========================================================             |  82%
  |                                                                            
  |==========================================================            |  82%
  |                                                                            
  |==========================================================            |  83%
  |                                                                            
  |==========================================================            |  84%
  |                                                                            
  |===========================================================           |  84%
  |                                                                            
  |===========================================================           |  85%
  |                                                                            
  |============================================================          |  85%
  |                                                                            
  |============================================================          |  86%
  |                                                                            
  |=============================================================         |  86%
  |                                                                            
  |=============================================================         |  87%
  |                                                                            
  |=============================================================         |  88%
  |                                                                            
  |==============================================================        |  88%
  |                                                                            
  |==============================================================        |  89%
  |                                                                            
  |===============================================================       |  89%
  |                                                                            
  |===============================================================       |  90%
  |                                                                            
  |===============================================================       |  91%
  |                                                                            
  |================================================================      |  91%
  |                                                                            
  |================================================================      |  92%
  |                                                                            
  |=================================================================     |  92%
  |                                                                            
  |=================================================================     |  93%
  |                                                                            
  |=================================================================     |  94%
  |                                                                            
  |==================================================================    |  94%
  |                                                                            
  |==================================================================    |  95%
  |                                                                            
  |===================================================================   |  95%
  |                                                                            
  |===================================================================   |  96%
  |                                                                            
  |====================================================================  |  96%
  |                                                                            
  |====================================================================  |  97%
  |                                                                            
  |====================================================================  |  98%
  |                                                                            
  |===================================================================== |  98%
  |                                                                            
  |===================================================================== |  99%
  |                                                                            
  |======================================================================|  99%
  |                                                                            
  |======================================================================| 100%

| Course installed successfully!


| Please choose a course, or type 0 to exit swirl.

1: Exploratory Data Analysis
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Principles of Analytic Graphs   2: Exploratory Graphs           
 3: Graphics Devices in R           4: Plotting Systems             
 5: Base Plotting System            6: Lattice Plotting System      
 7: Working with Colors             8: GGPlot2 Part1                
 9: GGPlot2 Part2                  10: GGPlot2 Extras               
11: Hierarchical Clustering        12: K Means Clustering           
13: Dimension Reduction            14: Clustering Example           
15: CaseStudy                      

Selection: 2

  |                                                                            
  |                                                                      |   0%

| Exploratory_Graphs. (Slides for this and other Data Science courses may be
| found at github https://github.com/DataScienceSpecialization/courses/. If you
| care to use them, they must be downloaded as a zip file and viewed locally.
| This lesson corresponds to 04_ExploratoryAnalysis/exploratoryGraphs.)

...


  |                                                                            
  |=                                                                     |   1%
| In this lesson, we'll discuss why graphics are an important tool for data
| scientists and the special role that exploratory graphs play in the field.

...


  |                                                                            
  |==                                                                    |   3%
| Which of the following would NOT be a good reason to use graphics in data
| science?

1: To find a color that best matches the shirt you're wearing
2: To find patterns in data
3: To understand data properties
4: To suggest modeling strategies

Selection: 1

| Nice work!


  |                                                                            
  |===                                                                   |   4%
| So graphics give us some visual form of data, and since our brains are very
| good at seeing patterns, graphs give us a compact way to present data and
| find or display any pattern that may be present.

...


  |                                                                            
  |====                                                                  |   5%
| Which of the following cliches captures the essence of graphics?

1: A rose by any other name smells as sweet
2: The apple doesn't fall far from the tree
3: To err is human, to forgive divine
4: A picture is worth a 1000 words

Selection: 4

| Keep up the great work!


  |                                                                            
  |=====                                                                 |   7%
| Exploratory graphs serve mostly the same functions as graphs. They help us
| find patterns in data and understand its properties. They suggest modeling
| strategies and help to debug analyses. We DON'T use exploratory graphs to
| communicate results.

...


  |                                                                            
  |======                                                                |   8%
| Instead, exploratory graphs are the initial step in an investigation, the
| "quick and dirty" tool used to point the data scientist in a fruitful
| direction. A scientist might need to make a lot of exploratory graphs in
| order to develop a personal understanding of the problem being studied. Plot
| details such as axes, legends, color and size are cleaned up later to convey
| more information in an aesthetically pleasing way.

...


  |                                                                            
  |=======                                                               |   9%
| To demonstrate these ideas, we've copied some data for you from the U.S.
| Environmental Protection Agency (EPA) which sets national ambient air quality
| standards for outdoor air pollution. These Standards say that for fine
| particle pollution (PM2.5), the "annual mean, averaged over 3 years" cannot
| exceed 12 micro grams per cubic meter. We stored the data from the U.S. EPA
| web site in the data frame pollution. Use the R function head to see the
| first few entries of pollution.

> 
> head(pollution)
       pm25  fips region longitude latitude
1  9.771185 01003   east -87.74826 30.59278
2  9.993817 01027   east -85.84286 33.26581
3 10.688618 01033   east -87.72596 34.73148
4 11.337424 01049   east -85.79892 34.45913
5 12.119764 01055   east -86.03212 34.01860
6 10.827805 01069   east -85.35039 31.18973

| Keep working like that and you'll get there!


  |                                                                            
  |=======                                                               |  11%
| We see right away that there's at least one county exceeding the EPA's
| standard of 12 micrograms per cubic meter. What else do we see?

...


  |                                                                            
  |========                                                              |  12%
| We see 5 columns of data. The pollution count is in the first column labeled
| pm25. We'll work mostly with that. The other 4 columns are a fips code
| indicating the state (first 2 digits) and county (last 3 digits) with that
| count, the associated region (east or west), and the longitude and latitude
| of the area. Now run the R command dim with pollution as an argument to see
| how long the table is.

> dim(pollution)
[1] 576   5

| You're the best!


  |                                                                            
  |=========                                                             |  13%
| So there are 576 entries in pollution. We'd like to investigate the question
| "Are there any counties in the U.S. that exceed that national standard (12
| micro grams per cubic meter) for fine particle pollution?" We'll look at
| several one dimensional summaries of the data to investigate this question.

...


  |                                                                            
  |==========                                                            |  15%
| The first technique uses the R command summary, a 5-number summary which
| returns 6 numbers. Run it now with the pm25 column of pollution as its
| argument. Recall that the construct for this is pollution$pm25.

> pollution$pm25
  [1]  9.771185  9.993817 10.688618 11.337424 12.119764 10.827805 11.583928
  [8] 11.261996  9.414423 11.391494 12.384795 10.649500 11.333821 12.302436
 [15] 11.024508  6.058860 11.101467  7.308113  7.147626  6.929844  6.132351
 [22]  8.228339  5.328475 10.502862 11.326499  5.165413 10.835515 10.436235
 [29] 11.114743 10.823157 10.745523 10.450351 10.723959 10.441737 11.097645
 [36] 11.840086 11.105003 10.887024 10.696524 10.641453  9.465902  9.842297
 [43]  6.768743  6.944759  8.545173 16.194524  7.196966  9.417947  6.431331
 [50] 15.803780 18.440731  3.494351 16.661801  8.151318 15.015733  6.455655
 [57]  5.280999 14.506272  7.969183  9.678393 17.429049  9.679342  5.995774
 [64]  9.843627 10.741087 11.560022  7.308466  8.999636  8.415964  9.841446
 [71]  6.196792  5.560546  5.702414 10.099460  6.925403 16.251904  7.309657
 [78] 16.183583  9.617136  7.705003  8.469519  6.654664  6.771765  7.733877
 [85]  5.732005  4.186090  5.971900  6.614878  9.328776  6.275940  7.680745
 [92]  9.821778  8.894819  7.029871 10.001609  8.821875 10.412954 11.551756
 [99] 10.837718 11.023823  7.503461  6.877201  6.977536  7.375229  8.378378
[106]  8.961842  8.341545  6.744966  9.795967  5.000000  7.285535  6.348540
[113]  7.738196  7.679519  7.584909  6.800815  7.500355  7.213773 11.959208
[120] 10.824470 11.292279 12.913903 12.018416 12.145414 11.746439 11.817821
[127]  9.793812 12.145278 11.188334 11.422325  9.709880 12.200660 10.949059
[134] 12.392875 10.672707 11.358464 12.121381  6.824419  5.783519  5.693945
[141] 10.329405  4.917140 10.792448  8.846641 10.376327 12.437898 13.346910
[148]  9.353740 11.059005 11.878008 10.901309 11.269838 10.336829 10.581457
[155]  9.256495 10.275219 10.003862 10.469588 11.631926 12.702123 11.116070
[162] 10.104734  9.655263 12.331060 11.039065 10.505179 10.034725 13.093119
[169] 13.144659 11.855302 13.023923 12.046176 12.367141 11.630029 11.443252
[176] 11.692452 11.811781 12.753287 10.646946 12.089511 13.883217 12.197354
[183] 13.435254 12.224040 12.195055 12.828878 12.260916 10.473696 11.699045
[190] 10.917263 11.123664 10.407355  9.288892 12.679211  8.828504  9.402015
[197] 10.831346 11.960760  9.281105  8.938962  9.337790  9.057115  9.322162
[204]  8.681833  9.741182 11.281826 11.405537 12.665325 11.801188  9.685132
[211] 11.322465 12.051753 12.395794 11.103714 11.765029 11.859195 13.058814
[218] 11.903645 11.670030 10.343433 11.554662 10.090150 11.511463 10.851174
[225]  8.874310  9.970397  9.761818  9.079453  9.799970  9.703961  8.898718
[232] 12.178354  9.134486  8.528276 11.802678  7.794286  6.162443  8.182713
[239]  4.504539  7.334426  8.259664  7.384147  5.186250 11.439402 11.023192
[246] 11.665486  9.529465 10.669508 10.926625 10.919743 11.370975  9.194519
[253]  8.282754  7.949325  9.244576  8.031137  8.550007  9.788672  8.834979
[260]  8.935905  8.404685  9.208338 14.623500  9.140998  9.253624 10.071916
[267] 10.229916  9.535325  9.669258  6.745091  6.153301 10.370516  9.090500
[274] 10.020056  9.993553  9.888886 10.104034 10.880669  9.568676  9.649893
[281]  9.594459 10.205015  6.263498  9.422119  8.559982 10.287751 10.758182
[288] 10.645153 11.998575  9.768253  8.993276 11.447412  9.705737 12.157404
[295] 11.497955 11.304253 11.375990  9.823971 10.199264  9.609904 10.135240
[302] 11.173592 10.935242 12.523549  8.185202  6.875453  8.030033 11.464039
[309]  8.294273  7.187243  5.135916  6.170566  8.858588  9.376956  7.367368
[316]  8.503896 10.006475  8.759718  6.672426  7.203337  5.711976 10.208299
[323]  6.834998  8.349729  8.515929  7.598258  8.827018  9.035905  9.876226
[330]  9.117745 10.656258  9.024159  8.632513  8.073528  8.677116  9.538970
[337] 10.432357  9.551347  5.425800  5.689097  7.838288  4.793644  5.678738
[344]  4.601408  4.195688  8.233488 11.367129  7.771279 10.034822  4.625279
[351] 10.884358  8.251590  9.704766 11.784900  8.904244  7.926522  8.591969
[358] 10.114641  9.936354  7.500272  8.924974  9.611338 11.272163  9.319477
[365] 10.383642 11.806276  9.707310 11.376835 12.433921  9.750804 10.954336
[372] 10.062751 10.971491 11.308123 11.022960 11.045066  9.445623  9.809391
[379] 11.033742  9.444095 11.315136 10.194477 10.506809  9.971608 10.710838
[386] 11.681061 10.150782 10.747831  9.434592 11.059944  4.460193  7.057676
[393]  8.598159  6.121487  9.719606 13.424673 12.776898 11.575359 12.593666
[400] 11.909242 11.875767 13.770987 12.807829 12.228452 10.415077 11.556389
[407] 12.434767 11.149050 13.217910 11.494418 11.685097 11.594706 13.224641
[414] 13.082987 11.864689 12.232856  8.950644 10.716408 10.549134  9.630629
[421]  9.467113 10.217874 10.245121 11.147216  4.978397 11.422585  6.544022
[428]  7.857464 11.201131  9.606104  7.981166  9.559339  7.138978  7.512537
[435]  6.722891  8.617499 11.355195 13.136062 12.897254 11.132102 11.342894
[442] 13.195630  9.923461 13.654429 13.919460 12.420925 13.308193 10.511073
[449]  9.677219 12.702044 11.020534 10.774001 12.709182 11.500995 11.838172
[456] 13.281318 12.459742  6.615918  8.690118  9.201633 10.297114 10.740024
[463] 10.563050 11.558594 11.422803  8.600291 11.203930  8.319356  8.136039
[470]  8.631982  4.324736  4.175901  9.101323  6.105285 11.782392 10.815339
[477] 10.104499 11.480995 12.155269  9.043446 12.445652 11.721120  9.721455
[484]  9.755862 10.607539 10.459144 12.035383 10.658054 11.053976 10.431050
[491]  8.911126 11.277835  5.349604 10.711332 10.102954  7.412242  9.747652
[498] 10.305085 11.727956  9.873713 10.204761  9.866045  7.740238  9.722218
[505]  9.835390  5.998857 10.304592  9.214648  7.974543  9.757741  9.631552
[512]  9.632232  6.624555  8.866858  9.195895  6.902222  6.296837  9.782239
[519]  9.386446 10.881701  9.487579 10.236205 10.353459 11.075066  9.767818
[526] 10.190762  9.844875 10.801909 10.221530  9.327619 10.257793 10.314598
[533]  9.928187  9.802806  7.930779  7.939444  8.843770  7.821492  9.462253
[540] 12.876411 13.339803 13.043723 12.405182 11.783240 12.420487 12.843695
[547] 13.131861 11.556837 12.423321 10.114421 12.840365  5.715239 11.366288
[554] 11.098744  6.308198 11.219191 10.440923 10.058572  9.417947 11.575934
[561] 10.248115 10.030949  9.749491  9.208060  8.483095  6.111594 11.975980
[568]  5.272252  3.382626  8.505596  4.132739  4.955570  6.549239  5.632587
[575]  6.349710  4.565808

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type summary(pollution$pm25) at the command prompt.

> summary(pollution$pm25)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.383   8.549  10.047   9.836  11.356  18.441 

| You're the best!


  |                                                                            
  |===========                                                           |  16%
| This shows us basic info about the pm25 data, namely its Minimum (0
| percentile) and Maximum (100 percentile) values, and three Quartiles of the
| data. These last indicate the pollution measures at which 25%, 50%, and 75%
| of the counties fall below. In addition to these 5 numbers we see the Mean or
| average measure of particulate pollution across the 576 counties.

...


  |                                                                            
  |============                                                          |  17%
| Half the measured counties have a pollution level less than or equal to what
| number of micrograms per cubic meter?

1: 8.549
2: 10.050
3: 11.360
4: 9.836

Selection: 2

| You are amazing!


  |                                                                            
  |=============                                                         |  19%
| To save you a lot of typing we've saved off pollution$pm25 for you in the
| variable ppm. You can use ppm now in place of the longer expression. Try it
| now as the argument of the R command quantile. See how the results look a lot
| like the results of the output of the summary command.

> ppm
  [1]  9.771185  9.993817 10.688618 11.337424 12.119764 10.827805 11.583928
  [8] 11.261996  9.414423 11.391494 12.384795 10.649500 11.333821 12.302436
 [15] 11.024508  6.058860 11.101467  7.308113  7.147626  6.929844  6.132351
 [22]  8.228339  5.328475 10.502862 11.326499  5.165413 10.835515 10.436235
 [29] 11.114743 10.823157 10.745523 10.450351 10.723959 10.441737 11.097645
 [36] 11.840086 11.105003 10.887024 10.696524 10.641453  9.465902  9.842297
 [43]  6.768743  6.944759  8.545173 16.194524  7.196966  9.417947  6.431331
 [50] 15.803780 18.440731  3.494351 16.661801  8.151318 15.015733  6.455655
 [57]  5.280999 14.506272  7.969183  9.678393 17.429049  9.679342  5.995774
 [64]  9.843627 10.741087 11.560022  7.308466  8.999636  8.415964  9.841446
 [71]  6.196792  5.560546  5.702414 10.099460  6.925403 16.251904  7.309657
 [78] 16.183583  9.617136  7.705003  8.469519  6.654664  6.771765  7.733877
 [85]  5.732005  4.186090  5.971900  6.614878  9.328776  6.275940  7.680745
 [92]  9.821778  8.894819  7.029871 10.001609  8.821875 10.412954 11.551756
 [99] 10.837718 11.023823  7.503461  6.877201  6.977536  7.375229  8.378378
[106]  8.961842  8.341545  6.744966  9.795967  5.000000  7.285535  6.348540
[113]  7.738196  7.679519  7.584909  6.800815  7.500355  7.213773 11.959208
[120] 10.824470 11.292279 12.913903 12.018416 12.145414 11.746439 11.817821
[127]  9.793812 12.145278 11.188334 11.422325  9.709880 12.200660 10.949059
[134] 12.392875 10.672707 11.358464 12.121381  6.824419  5.783519  5.693945
[141] 10.329405  4.917140 10.792448  8.846641 10.376327 12.437898 13.346910
[148]  9.353740 11.059005 11.878008 10.901309 11.269838 10.336829 10.581457
[155]  9.256495 10.275219 10.003862 10.469588 11.631926 12.702123 11.116070
[162] 10.104734  9.655263 12.331060 11.039065 10.505179 10.034725 13.093119
[169] 13.144659 11.855302 13.023923 12.046176 12.367141 11.630029 11.443252
[176] 11.692452 11.811781 12.753287 10.646946 12.089511 13.883217 12.197354
[183] 13.435254 12.224040 12.195055 12.828878 12.260916 10.473696 11.699045
[190] 10.917263 11.123664 10.407355  9.288892 12.679211  8.828504  9.402015
[197] 10.831346 11.960760  9.281105  8.938962  9.337790  9.057115  9.322162
[204]  8.681833  9.741182 11.281826 11.405537 12.665325 11.801188  9.685132
[211] 11.322465 12.051753 12.395794 11.103714 11.765029 11.859195 13.058814
[218] 11.903645 11.670030 10.343433 11.554662 10.090150 11.511463 10.851174
[225]  8.874310  9.970397  9.761818  9.079453  9.799970  9.703961  8.898718
[232] 12.178354  9.134486  8.528276 11.802678  7.794286  6.162443  8.182713
[239]  4.504539  7.334426  8.259664  7.384147  5.186250 11.439402 11.023192
[246] 11.665486  9.529465 10.669508 10.926625 10.919743 11.370975  9.194519
[253]  8.282754  7.949325  9.244576  8.031137  8.550007  9.788672  8.834979
[260]  8.935905  8.404685  9.208338 14.623500  9.140998  9.253624 10.071916
[267] 10.229916  9.535325  9.669258  6.745091  6.153301 10.370516  9.090500
[274] 10.020056  9.993553  9.888886 10.104034 10.880669  9.568676  9.649893
[281]  9.594459 10.205015  6.263498  9.422119  8.559982 10.287751 10.758182
[288] 10.645153 11.998575  9.768253  8.993276 11.447412  9.705737 12.157404
[295] 11.497955 11.304253 11.375990  9.823971 10.199264  9.609904 10.135240
[302] 11.173592 10.935242 12.523549  8.185202  6.875453  8.030033 11.464039
[309]  8.294273  7.187243  5.135916  6.170566  8.858588  9.376956  7.367368
[316]  8.503896 10.006475  8.759718  6.672426  7.203337  5.711976 10.208299
[323]  6.834998  8.349729  8.515929  7.598258  8.827018  9.035905  9.876226
[330]  9.117745 10.656258  9.024159  8.632513  8.073528  8.677116  9.538970
[337] 10.432357  9.551347  5.425800  5.689097  7.838288  4.793644  5.678738
[344]  4.601408  4.195688  8.233488 11.367129  7.771279 10.034822  4.625279
[351] 10.884358  8.251590  9.704766 11.784900  8.904244  7.926522  8.591969
[358] 10.114641  9.936354  7.500272  8.924974  9.611338 11.272163  9.319477
[365] 10.383642 11.806276  9.707310 11.376835 12.433921  9.750804 10.954336
[372] 10.062751 10.971491 11.308123 11.022960 11.045066  9.445623  9.809391
[379] 11.033742  9.444095 11.315136 10.194477 10.506809  9.971608 10.710838
[386] 11.681061 10.150782 10.747831  9.434592 11.059944  4.460193  7.057676
[393]  8.598159  6.121487  9.719606 13.424673 12.776898 11.575359 12.593666
[400] 11.909242 11.875767 13.770987 12.807829 12.228452 10.415077 11.556389
[407] 12.434767 11.149050 13.217910 11.494418 11.685097 11.594706 13.224641
[414] 13.082987 11.864689 12.232856  8.950644 10.716408 10.549134  9.630629
[421]  9.467113 10.217874 10.245121 11.147216  4.978397 11.422585  6.544022
[428]  7.857464 11.201131  9.606104  7.981166  9.559339  7.138978  7.512537
[435]  6.722891  8.617499 11.355195 13.136062 12.897254 11.132102 11.342894
[442] 13.195630  9.923461 13.654429 13.919460 12.420925 13.308193 10.511073
[449]  9.677219 12.702044 11.020534 10.774001 12.709182 11.500995 11.838172
[456] 13.281318 12.459742  6.615918  8.690118  9.201633 10.297114 10.740024
[463] 10.563050 11.558594 11.422803  8.600291 11.203930  8.319356  8.136039
[470]  8.631982  4.324736  4.175901  9.101323  6.105285 11.782392 10.815339
[477] 10.104499 11.480995 12.155269  9.043446 12.445652 11.721120  9.721455
[484]  9.755862 10.607539 10.459144 12.035383 10.658054 11.053976 10.431050
[491]  8.911126 11.277835  5.349604 10.711332 10.102954  7.412242  9.747652
[498] 10.305085 11.727956  9.873713 10.204761  9.866045  7.740238  9.722218
[505]  9.835390  5.998857 10.304592  9.214648  7.974543  9.757741  9.631552
[512]  9.632232  6.624555  8.866858  9.195895  6.902222  6.296837  9.782239
[519]  9.386446 10.881701  9.487579 10.236205 10.353459 11.075066  9.767818
[526] 10.190762  9.844875 10.801909 10.221530  9.327619 10.257793 10.314598
[533]  9.928187  9.802806  7.930779  7.939444  8.843770  7.821492  9.462253
[540] 12.876411 13.339803 13.043723 12.405182 11.783240 12.420487 12.843695
[547] 13.131861 11.556837 12.423321 10.114421 12.840365  5.715239 11.366288
[554] 11.098744  6.308198 11.219191 10.440923 10.058572  9.417947 11.575934
[561] 10.248115 10.030949  9.749491  9.208060  8.483095  6.111594 11.975980
[568]  5.272252  3.382626  8.505596  4.132739  4.955570  6.549239  5.632587
[575]  6.349710  4.565808

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type quantile(ppm) at the command prompt.

> quantile(ppm)
       0%       25%       50%       75%      100% 
 3.382626  8.548799 10.046697 11.356012 18.440731 

| Nice work!


  |                                                                            
  |==============                                                        |  20%
| See how the results are similar to those returned by summary? Quantile gives
| the quartiles, right? What is the one value missing from this quantile output
| that summary gave you?

1: the minimum value
2: the median
3: the mean
4: the maximum value

Selection: 3

| Perseverance, that's the answer.


  |                                                                            
  |===============                                                       |  21%
| Now we'll plot a picture, specifically a boxplot. Run the R command boxplot
| with ppm as an input. Also specify the color parameter col equal to "blue".

> boxplot(ppm, col="blue")

| You are amazing!


  |                                                                            
  |================                                                      |  23%
| The boxplot shows us the same quartile data that summary and quantile did.
| The lower and upper edges of the blue box respectively show the values of the
| 25% and 75% quantiles.

...


  |                                                                            
  |=================                                                     |  24%
| What do you think the horizontal line inside the box represents?

1: the minimum value
2: the mean
3: the maximum value
4: the median

Selection: 4

| All that hard work is paying off!


  |                                                                            
  |==================                                                    |  25%
| The "whiskers" of the box (the vertical lines extending above and below the
| box) relate to the range parameter of boxplot, which we let default to the
| value 1.5 used by R. The height of the box is the interquartile range, the
| difference between the 75th and 25th quantiles. In this case that difference
| is 2.8. The whiskers are drawn to be a length of range*2.8 or 1.5*2.8. This
| shows us roughly how many, if any, data points are outliers, that is, beyond
| this range of values.

...


  |                                                                            
  |===================                                                   |  27%
| Note that boxplot is part of R's base plotting package. A nice feature that
| this package provides is its ability to overlay features. That is, you can
| add to (annotate) an existing plot.

...


  |                                                                            
  |====================                                                  |  28%
| To see this, run the R command abline with the argument h equal to 12. Recall
| that 12 is the EPA standard for air quality.

> abline(h=12)

| That's correct!


  |                                                                            
  |=====================                                                 |  29%
| What do you think this command did?

1: drew a vertical line at 12
2: hid 12 random data points
3: nothing
4: drew a horizontal line at 12

Selection: 4

| You got it!


  |                                                                            
  |=====================                                                 |  31%
| So abline "adds one or more straight lines through the current plot." We see
| from the plot that the bulk of the measured counties comply with the standard
| since they fall under the line marking that standard.

...


  |                                                                            
  |======================                                                |  32%
| Now use the R command hist (another function from the base package) with the
| argument ppm. Specify the color parameter col equal to "green". This will
| plot a histogram of the data.

> hist(ppm, col="green")

| You got it right!


  |                                                                            
  |=======================                                               |  33%
| The histogram gives us a little more detailed information about our data,
| specifically the distribution of the pollution counts, or how many counties
| fall into each bucket of measurements.

...


  |                                                                            
  |========================                                              |  35%
| What are the most frequent pollution counts?

1: between 12 and 14
2: under 5
3: between 6 and 8
4: between 9 and 12

Selection: 4

| Keep working like that and you'll get there!


  |                                                                            
  |=========================                                             |  36%
| Now run the R command rug with the argument ppm.

> rug(ppm)

| Your dedication is inspiring!


  |                                                                            
  |==========================                                            |  37%
| This one-dimensional plot, with its grayscale representation, gives you a
| little more detailed information about how many data points are in each
| bucket and where they lie within the bucket. It shows (through density of
| tick marks) that the greatest concentration of counties has between 9 and 12
| micrograms per cubic meter just as the histogram did.

...


  |                                                                            
  |===========================                                           |  39%
| To illustrate this a little more, we've defined for you two vectors, high and
| low, containing pollution data of high (greater than 15) and low (less than
| 5) values respectively. Look at low now and see how it relates to the output
| of rug.

> low
 [1] 3.494351 4.186090 4.917140 4.504539 4.793644 4.601408 4.195688 4.625279
 [9] 4.460193 4.978397 4.324736 4.175901 3.382626 4.132739 4.955570 4.565808

| Great job!


  |                                                                            
  |============================                                          |  40%
| It confirms that there are two data points between 3 and 4 and many between 4
| and 5. Now look at high.

> hihg
Error: object 'hihg' not found
> high
[1] 16.19452 15.80378 18.44073 16.66180 15.01573 17.42905 16.25190 16.18358

| All that hard work is paying off!


  |                                                                            
  |=============================                                         |  41%
| Again, we see one data point greater than 18, one between 17 and 18, several
| between 16 and 17 and two between 15 and 16, verifying what rug indicated.

...


  |                                                                            
  |==============================                                        |  43%
| Now rerun hist with 3 arguments, ppm as its first, col equal to "green", and
| the argument breaks equal to 100.

> hist(ppm, col="green", breaks=100)

| You are amazing!


  |                                                                            
  |===============================                                       |  44%
| What do you think the breaks argument specifies in this case?

1: the number of stars in the sky
2: the number of data points to graph
3: the number of counties exceeding the EPA standard
4: the number of buckets to split the data into

Selection: 4

| Nice work!


  |                                                                            
  |================================                                      |  45%
| So this histogram with more buckets is not nearly as smooth as the preceding
| one. In fact, it's a little too noisy to see the distribution clearly. When
| you're plotting histograms you might have to experiment with the argument
| breaks to get a good idea of your data's distribution. For fun now, rerun the
| R command rug with the argument ppm.

> hist(ppm, col="green")

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type rug(ppm) at the command prompt.

> hist(ppm, col="green", breaks=100)

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type rug(ppm) at the command prompt.

> rug(ppm)

| Keep working like that and you'll get there!


  |                                                                            
  |=================================                                     |  47%
| See how rug works with the existing plot? It automatically adjusted its
| pocket size to that of the last plot plotted.

...


  |                                                                            
  |==================================                                    |  48%
| Now rerun hist with ppm as the data and col equal to "green".

> hist(ppm, col="green")

| You got it right!


  |                                                                            
  |===================================                                   |  49%
| Now run the command abline with the argument v equal to 12 and the argument
| lwd equal to 2.

> abline(v=12, lwd=2)

| That's correct!


  |                                                                            
  |===================================                                   |  51%
| See the vertical line at 12? Not very visible, is it, even though you
| specified a line width of 2? Run abline with the argument v equal to
| median(ppm), the argument col equal to "magenta", and the argument lwd equal
| to 4.

> abline(v=median(ppm), col="magenta", lwd=4)

| Nice work!


  |                                                                            
  |====================================                                  |  52%
| Better, right? Thicker and more of a contrast in color. This shows that
| although the median (50%) is below the standard, there are a fair number of
| counties in the U.S that have pollution levels higher than the standard.

...


  |                                                                            
  |=====================================                                 |  53%
| Now recall that our pollution data had 5 columns of information. So far we've
| only looked at the pm25 column. We can also look at other information. To
| remind yourself what's there run the R command names with pollution as the
| argument.

> names(pollution)
[1] "pm25"      "fips"      "region"    "longitude" "latitude" 

| You nailed it! Good job!


  |                                                                            
  |======================================                                |  55%
| Longitude and latitude don't sound interesting, and each fips is unique since
| it identifies states (first 2 digits) and counties (last 3 digits). Let's
| look at the region column to see what's there. Run the R command table on
| this column. Use the construct pollution$region. Store the result in the
| variable reg.

> reg <- pollution$region

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Type reg <- table(pollution$region) at the command prompt.

> reg <- table(pollution$region)

| You are amazing!


  |                                                                            
  |=======================================                               |  56%
| Look at reg now.

> reg

east west 
 442  134 

| Great job!


  |                                                                            
  |========================================                              |  57%
| Lot more counties in the east than west. We'll use the R command barplot
| (another type of one-dimensional summary) to plot this information. Call
| barplot with reg as its first argument, the argument col equal to "wheat",
| and the argument main equal to the string "Number of Counties in Each
| Region".

> barplot(reg, col="wheat", main="Number of Countries in Each Region")

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
| at the command prompt.

> barplot(reg, col = "wheat", main = "Number of Counties in Each Region")

| Keep working like that and you'll get there!


  |                                                                            
  |=========================================                             |  59%
| What do you think the argument main specifies?

1: I can't tell
2: the y axis label
3: the title of the graph
4: the x axis label

Selection: 3

| Great job!


  |                                                                            
  |==========================================                            |  60%
| So we've seen several examples of one-dimensional graphs that summarize data.
| Two dimensional graphs include scatterplots, multiple graphs which we'll see
| more examples of, and overlayed one-dimensional plots which the R packages
| such as lattice and ggplot2 provide.

...


  |                                                                            
  |===========================================                           |  61%
| Some graphs have more than two-dimensions. These include overlayed or
| multiple two-dimensional plots and spinning plots. Some three-dimensional
| plots are tricky to understand so have limited applications. We'll see some
| examples now of more complicated graphs, in particular, we'll show two graphs
| together.

...


  |                                                                            
  |============================================                          |  63%
| First we'll show how R, in one line and using base plotting, can display
| multiple boxplots. We simply specify that we want to see the pollution data
| as a function of region. We know that our pollution data characterized each
| of the 576 entries as belonging to one of two regions (east and west).

...


  |                                                                            
  |=============================================                         |  64%
| We use the R formula y ~ x to show that y (in this case pm25) depends on x
| (region). Since both come from the same data frame (pollution) we can specify
| a data argument set equal to pollution. By doing this, we don't have to type
| pollution$pm25 (or ppm) and pollution$region. We can just specify the formula
| pm25~region. Call boxplot now with this formula as its argument, data equal
| to pollution, and col equal to "red".

> boxplot(pm25~region, data=pollution, col="red")

| You are really on a roll!


  |                                                                            
  |==============================================                        |  65%
| Two for the price of one! Similarly we can plot multiple histograms in one
| plot, though to do this we have to use more than one R command. First we have
| to set up the plot window with the R command par which specifies how we want
| to lay out the plots, say one above the other. We also use par to specify
| margins, a 4-long vector which indicates the number of lines for the bottom,
| left, top and right. Type the R command par(mfrow=c(2,1),mar=c(4,4,2,1)) now.
| Don't expect to see any new result.

> 
> par(mfrow=c(2,1), mar=c(4,4,2,1))

| Keep up the great work!


  |                                                                            
  |===============================================                       |  67%
| So we set up the plot window for two rows and one column with the mfrow
| argument. The mar argument set up the margins. Before we plot the histograms
| let's explore the R command subset which, not surprisingly, "returns subsets
| of vectors, matrices or data frames which meet conditions". We'll use subset
| to pull off the data we want to plot. Call subset now with pollution as its
| first argument and a boolean expression testing region for equality with the
| string "east". Put the result in the variable east.

> east <- subset(pollution, region=="east")

| Keep working like that and you'll get there!


  |                                                                            
  |================================================                      |  68%
| Use head to look at the first few entries of east.

> head(east)
       pm25  fips region longitude latitude
1  9.771185 01003   east -87.74826 30.59278
2  9.993817 01027   east -85.84286 33.26581
3 10.688618 01033   east -87.72596 34.73148
4 11.337424 01049   east -85.79892 34.45913
5 12.119764 01055   east -86.03212 34.01860
6 10.827805 01069   east -85.35039 31.18973

| Keep up the great work!


  |                                                                            
  |=================================================                     |  69%
| So east holds more information than we need. We just want to plot a histogram
| with the pm25 portion. Call hist now with the pm25 portion of east as its
| first argument and col equal to "green" as its second.

> hist(east$pm25, col="green")

| You are doing so well!


  |                                                                            
  |=================================================                     |  71%
| See? The command par told R we were going to have one column with 2 rows, so
| it placed this histogram in the top position.

...


  |                                                                            
  |==================================================                    |  72%
| Now, here's a challenge for you. Plot the histogram of the counties from the
| west using just one R command. Let the appropriate subset command (with the
| pm25 portion specified) be the first argument and col (equal to "green") the
| second.  To cut down on your typing, use the up arrow key to get your last
| command and replace "east" with the subset command. Make sure the boolean
| argument checks for equality between region and "west".

> hist(subset(pollution, region=="west")$pm25, col="green")

| You are quite good my friend!


  |                                                                            
  |===================================================                   |  73%
| See how R does all the labeling for you? Notice that the titles are different
| since we used different commands for the two plots. Let's look at some
| scatter plots now.

...


  |                                                                            
  |====================================================                  |  75%
| Scatter plots are two-dimensional plots which show the relationship between
| two variables, usually x and y. Let's look at a scatterplot showing the
| relationship between latitude and the pm25 data. We'll use plot, a function
| from R's base plotting package.

...


  |                                                                            
  |=====================================================                 |  76%
| We've seen that we can use a function call as an argument when calling
| another function. We'll do this again when we call plot with the arguments
| latitude and pm25 which are both from our data frame pollution. We'll call
| plot from inside the R command with which evaluates "an R expression in an
| environment constructed from data". We'll use pollution as the first argument
| to with and the call to plot as the second. This allows us to avoid typing
| "pollution$" before the arguments to plot, so it saves us some typing and
| adds to your base of R knowledge. Try this now.

> with(pollution, plot(latitude, pm25))

| Keep up the great work!


  |                                                                            
  |======================================================                |  77%
| Note that the first argument is plotted along the x-axis and the second along
| the y. Now use abline to add a horizontal line at 12. Use two additional
| arguments, lwd equal to 2 and lty also equal to 2. See what happens.

> with(pollution, plot(latitude, pm25, lwd=2, lty=2))

| Not quite right, but keep trying. Or, type info() for more options.

| Type abline(h = 12, lwd = 2, lty = 2) at the command prompt.

> with(pollution, plot(latitude, pm25))

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Type abline(h = 12, lwd = 2, lty = 2) at the command prompt.

> with(pollution, abline(latitude, pm25, lwd=2, lty=2))

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type abline(h = 12, lwd = 2, lty = 2) at the command prompt.

> with(pollution, abline(h=12, lwd=2, lty=2))

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| Type abline(h = 12, lwd = 2, lty = 2) at the command prompt.

> abline(h=12, lwd=2, lty=2)

| Excellent job!


  |                                                                            
  |=======================================================               |  79%
| See how lty=2 made the line dashed? Now let's replot the scatterplot. This
| time, instead of using with, call plot directly with 3 arguments. The first 2
| are pollution$latitude and ppm. The third argument, col, we'll use to add
| color and more information to our plot. Set this argument (col) equal to
| pollution$region and see what happens.

> plot(pollutoin$latitude, pollution$pm25, col=pollution$region)
Error in plot(pollutoin$latitude, pollution$pm25, col = pollution$region) : 
  object 'pollutoin' not found
> plot(pollutoin$latitude, pollution$pm25, col=pollution$region)
Error in plot(pollutoin$latitude, pollution$pm25, col = pollution$region) : 
  object 'pollutoin' not found
> play
function () 
{
    invisible()
}
<bytecode: 0x0000000030675e58>
<environment: namespace:swirl>

| Give it another try. Or, type info() for more options.

| Type plot(pollution$latitude, ppm, col = pollution$region) at the command
| prompt.

> names(pollution)
[1] "pm25"      "fips"      "region"    "longitude" "latitude" 

| Not quite! Try again. Or, type info() for more options.

| Type plot(pollution$latitude, ppm, col = pollution$region) at the command
| prompt.

> quite
Error: object 'quite' not found
> quite!
Error: unexpected '!' in "quite!"
> plot(pollutoin$latitude, pm25, col=pollution$region)
Error in plot(pollutoin$latitude, pm25, col = pollution$region) : 
  object 'pollutoin' not found
> plot(pollution$latitude, pollution$pm25, col=pollution$region)

| Not quite! Try again. Or, type info() for more options.

| Type plot(pollution$latitude, ppm, col = pollution$region) at the command
| prompt.

> plot(pollution$latitude, pm25, col=pollution$region)
Error in xy.coords(x, y, xlabel, ylabel, log) : object 'pm25' not found
> plot(pollution$latitude, ppm, col=pollution$region)

| You are really on a roll!


  |                                                                            
  |========================================================              |  80%
| We've got two colors on the map to distinguish between counties in the east
| and those in the west. Can we figure out which color is east and which west?
| See that the high (greater than 50) and low (less than 25) latitudes are both
| red. Latitudes indicate distance from the equator, so which half of the U.S.
| (east or west) has counties at the extreme north and south?

1: east
2: west

Selection: 1

| That's not the answer I was looking for, but try again.

| Alaska and Hawaii are at the extreme latitudes.

1: west
2: east

Selection: 1

| Your dedication is inspiring!


  |                                                                            
  |=========================================================             |  81%
| As before, use abline to add a horizontal line at 12. Use two additional
| arguments, lwd equal to 2 and lty also equal to 2.

> abline(h-12, lwd=2, lt2=2)
Error in abline(h - 12, lwd = 2, lt2 = 2) : object 'h' not found
> abline(h=12, lwd=2, lt2=2)
Warning message:
In int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) :
  "lt2" is not a graphical parameter

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Type abline(h = 12, lwd = 2, lty = 2) at the command prompt.

> abline(h = 12, lwd = 2, lty=2)

| You're the best!


  |                                                                            
  |==========================================================            |  83%
| We see many counties are above the healthy standard set by the EPA, but it's
| hard to tell overall, which region, east or west, is worse.

...


  |                                                                            
  |===========================================================           |  84%
| Let's plot two scatterplots distinguished by region.

...


  |                                                                            
  |============================================================          |  85%
| As we did with multiple histograms, we first have to set up the plot window
| with the R command par. This time, let's plot the scatterplots side by side
| (one row and two columns). We also need to use different margins. Type the R
| command par(mfrow = c(1, 2), mar = c(5, 4, 2, 1)) now. Don't expect to see
| any new result.

> par(mfrow = c(1,2), mar = c(5, 4, 2, 1))

| All that practice is paying off!


  |                                                                            
  |=============================================================         |  87%
| For the first scatterplot, on the left, we'll plot the latitudes and pm25
| counts from the west. We already pulled out the information for the counties
| in the east. Let's now get the information for the counties from the west.
| Create the variable west by using the subset command with pollution as the
| first argument and the appropriate boolean as the second.

> west <- subset(pollution, region=="west")

| You are really on a roll!


  |                                                                            
  |==============================================================        |  88%
| Now call plot with three arguments. These are west$latitude (x-axis),
| west$pm25 (y-axis), and the argument main equal to the string "West" (title).
| Do this now.

> plot(west$latitude, west$pm25, main="West")

| That's the answer I was looking for.


  |                                                                            
  |===============================================================       |  89%
| For the second scatterplot, on the right, we'll plot the latitudes and pm25
| counts from the east.

...


  |                                                                            
  |===============================================================       |  91%
| As before, use the up arrow key and change the 3 "West" strings to "East".

> plot(east$latitude, east$pm25, main="East")

| You nailed it! Good job!


  |                                                                            
  |================================================================      |  92%
| See how R took care of all the details for you? Nice, right? It looks like
| there are more dirty counties in the east but the extreme dirt (greater than
| 15) is in the west.

...


  |                                                                            
  |=================================================================     |  93%
| Let's summarize and review.

...


  |                                                                            
  |==================================================================    |  95%
| Which of the following characterizes exploratory plots?

1: quick and dirty
2: quick and dead
3: slow and clean
4: slow and steady

Selection: 1

| Keep working like that and you'll get there!


  |                                                                            
  |===================================================================   |  96%
| True or false? Plots let you summarize the data (usually graphically) and
| highlight any broad features

1: False
2: True

Selection: 2

| You nailed it! Good job!


  |                                                                            
  |====================================================================  |  97%
| Which of the following do plots NOT do?

1: Suggest modeling strategies for the "next step"
2: Summarize the data (usually graphically) and highlight any broad features
3: Explore basic questions and hypotheses (and perhaps rule them out)
4: Conclude that you are ALWAYS right

Selection: 4

| You got it!


  |                                                                            
  |===================================================================== |  99%
| Congrats! You've concluded exploring this lesson on graphics. We hope you
| didn't find it too quick or dirty.

...


  |                                                                            
  |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 2
What is your email address? daniel.drennan@athora.com
What is your assignment token? pVqTvBZx6ILXGS30
Grade submission succeeded!

| All that hard work is paying off!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: Exploratory Data Analysis
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Principles of Analytic Graphs   2: Exploratory Graphs           
 3: Graphics Devices in R           4: Plotting Systems             
 5: Base Plotting System            6: Lattice Plotting System      
 7: Working with Colors             8: GGPlot2 Part1                
 9: GGPlot2 Part2                  10: GGPlot2 Extras               
11: Hierarchical Clustering        12: K Means Clustering           
13: Dimension Reduction            14: Clustering Example           
15: CaseStudy                      

Selection: 3

  |                                                                            
  |                                                                      |   0%

| Graphics_Devices_in_R. (Slides for this and other Data Science courses may be
| found at github https://github.com/DataScienceSpecialization/courses/. If you
| care to use them, they must be downloaded as a zip file and viewed locally.
| This lesson corresponds to 04_ExploratoryAnalysis/Graphics_Devices_in_R.)

...


  |                                                                            
  |==                                                                    |   3%
| As the title suggests, this will be a short lesson introducing you to
| graphics devices in R. So, what IS a graphics device?

...


  |                                                                            
  |====                                                                  |   6%
| Would you believe that it is something where you can make a plot appear,
| either a screen device, such as a window on your computer, OR a file device?

...


  |                                                                            
  |======                                                                |   9%
| There are several different kinds of file devices with particular
| characteristics and hence uses. These include PDF, PNG, JPEG, SVG, and TIFF.
| We'll talk more about these later.

...


  |                                                                            
  |========                                                              |  12%
| To be clear, when you make a plot in R, it has to be "sent" to a specific
| graphics device. Usually this is the screen (the default device), especially
| when you're doing exploratory work. You'll send your plots to files when
| you're ready to publish a report, make a presentation, or send info to
| colleagues.

...


  |                                                                            
  |==========                                                            |  15%
| How you access your screen device depends on what computer system you're
| using. On a Mac the screen device is launched with the call quartz(), on
| Windows you use the call windows(), and on Unix/Linux x11().  On a given
| platform (Mac, Windows, Unix/Linux) there is only one screen device, and
| obviously not all graphics devices are available on all platforms (i.e. you
| cannot launch windows() on a Mac).

...


  |                                                                            
  |============                                                          |  18%
| Run the R command ?Devices to see what graphics devices are available on your
| system.

> ?Devices
starting httpd help server ... done

| You are doing so well!


  |                                                                            
  |==============                                                        |  21%
| R Documentation shows you what's available.

...


  |                                                                            
  |================                                                      |  24%
| There are two basic approaches to plotting. The first, plotting to the
| screen, is the most common. It's simple - you call a plotting function like
| plot, xyplot, or qplot (which you call depends on the plotting system you
| favor, but that's another lesson), so that the plot appears on the screen.
| Then you annotate (add to) the plot if necessary.

...


  |                                                                            
  |===================                                                   |  26%
| As an example, run the R command with with 2 arguments. The first is a
| dataset, faithful, which comes with R, and the second is a call to the base
| plotting function plot. Your call to plot should have two arguments,
| eruptions and waiting. Try this now to see what happens.

> with( faithful, plot(eruptions, waiting))

| You are doing so well!


  |                                                                            
  |=====================                                                 |  29%
| See how R created a scatterplot on the screen for you? This shows that
| relationship between eruptions of the geyser Old Faithful and waiting time.
| Now use the R function title with the argument main set equal to the string
| "Old Faithful Geyser data". This is an annotation to the plot.

> title(main="Old Faithful Geyser data")

| All that practice is paying off!


  |                                                                            
  |=======================                                               |  32%
| Simple, right?  Now run the command dev.cur(). This will show you the current
| plotting device, the screen.

> dec.cur()
Error in dec.cur() : could not find function "dec.cur"
> dev.cur()
windows 
      2 

| You are quite good my friend!


  |                                                                            
  |=========================                                             |  35%
| The second way to create a plot is to send it to a file device. Depending on
| the type of plot you're making, you explicitly launch a graphics device,
| e.g., a pdf file. Type the command pdf(file="myplot.pdf") to launch the file
| device. This will create the pdf file myplot.pdf in your working directory.

> pdf(file="myplot.pdf")

| All that practice is paying off!


  |                                                                            
  |===========================                                           |  38%
| You then call the plotting function (if you are using a file device, no plot
| will appear on the screen). Run the with command again to plot the Old
| Faithful data. Use the up arrow key to recover the command and save yourself
| some typing.

> with( faithful, plot(eruptions, waiting))

| Excellent job!


  |                                                                            
  |=============================                                         |  41%
| Now rerun the title command and annotate the plot. (Up arrow keys are great!)

> title(main="Old Faithful Geyser data")

| Keep working like that and you'll get there!


  |                                                                            
  |===============================                                       |  44%
| Finally, when plotting to a file device, you have to close the device with
| the command dev.off(). This is very important! Don't do it yet, though. After
| closing, you'll be able to view the pdf file on your computer.

...


  |                                                                            
  |=================================                                     |  47%
| There are two basic types of file devices, vector and bitmap devices. These
| use different formats and have different characteristics. Vector formats are
| good for line drawings and plots with solid colors using a modest number of
| points, while bitmap formats are good for plots with a large number of
| points, natural scenes or web-based plots.

...


  |                                                                            
  |===================================                                   |  50%
| We'll mention 4 specific vector formats. The first is pdf, which we've just
| used in our example. This is useful for line-type graphics and papers. It
| resizes well, is usually portable, but it is not efficient if a plot has many
| objects/points.

...


  |                                                                            
  |=====================================                                 |  53%
| The second is svg which is XML-based, scalable vector graphics. This supports
| animation and interactivity and is potentially useful for web-based plots.

...


  |                                                                            
  |=======================================                               |  56%
| The last two vector formats are win.metafile, a Windows-only metafile format,
| and postscript (ps), an older format which also resizes well, is usually
| portable, and can be used to create encapsulated postscript files.
| Unfortunately, Windows systems often don’t have a postscript viewer.

...


  |                                                                            
  |=========================================                             |  59%
| We'll also mention 4 different bitmap formats. The first is png (Portable
| Network Graphics) which is good for line drawings or images with solid
| colors. It uses lossless compression (like the old GIF format), and most web
| browsers can read this format natively. In addition, png is good for plots
| with many points, but it does not resize well.

...


  |                                                                            
  |===========================================                           |  62%
| In contrast, jpeg files are good for photographs or natural scenes. They use
| lossy compression, so they're good for plots with many points. Files in jpeg
| format don't resize well, but they can be read by almost any computer and any
| web browser. They're not great for line drawings.

...


  |                                                                            
  |=============================================                         |  65%
| The last two bitmap formats are tiff, an older lossless compression
| meta-format and bmp which is a native Windows bitmapped format.

...


  |                                                                            
  |===============================================                       |  68%
| Although it is possible to open multiple graphics devices (screen, file, or
| both), when viewing multiple plots at once, plotting can only occur on one
| graphics device at a time.

...


  |                                                                            
  |=================================================                     |  71%
| The currently active graphics device can be found by calling dev.cur(). Try
| it now to see what number is assigned to your pdf device.

> dev.cur)(
Error: unexpected ')' in "dev.cur)"
> dev.cur()
pdf 
  3 

| That's the answer I was looking for.


  |                                                                            
  |===================================================                   |  74%
| Now use dev.off() to close the device.

> dev.off()
windows 
      2 

| All that hard work is paying off!


  |                                                                            
  |======================================================                |  76%
| Now rerun dev.cur() to see what integer your plotting window is assigned.

> dev.cur()
windows 
      2 

| Nice work!


  |                                                                            
  |========================================================              |  79%
| The device is back to what it was when you started. As you might have
| guessed, every open graphics device is assigned an integer greater than or
| equal to 2. You can change the active graphics device with dev.set(<integer>)
| where <integer> is the number associated with the graphics device you want to
| switch to.

...


  |                                                                            
  |==========================================================            |  82%
| You can also copy a plot from one device to another. This can save you some
| time but beware! Copying a plot is not an exact operation, so the result may
| not be identical to the original. R provides some functions to help you do
| this. The function dev.copy copies a plot from one device to another, and
| dev.copy2pdf specifically copies a plot to a PDF file.

...


  |                                                                            
  |============================================================          |  85%
| Just for fun, rerun the with command again, with(faithful, plot(eruptions,
| waiting)), to plot the Old Faithful data. Use the up arrow key to recover the
| command if you don't feel like typing.

> with( faithful, plot(eruptions, waiting))

| You're the best!


  |                                                                            
  |==============================================================        |  88%
| Now rerun the title command, title(main = "Old Faithful Geyser data"), to
| annotate the plot. (Up arrow keys are great!)

> title(main="Old Faithful Geyser data")

| All that practice is paying off!


  |                                                                            
  |================================================================      |  91%
| Now run dev.copy with the 2 arguments. The first is png, and the second is
| file set equal to "geyserplot.png". This will copy your screen plot to a png
| file in your working directory which you can view AFTER you close the device.

> dev.copy(png, "geyserplot.png")
png 
  3 

| Almost! Try again. Or, type info() for more options.

| Type dev.copy(png, file = "geyserplot.png") at the command prompt.

> dev.copy(png, file = "geyserplot.png")
png 
  4 

| You nailed it! Good job!


  |                                                                            
  |==================================================================    |  94%
| Don't forget to close the PNG device! Do it NOW!!! Then you'll be able to
| view the file.

> dev.close()
Error in dev.close() : could not find function "dev.close"
> dev.off()
windows 
      2 

| You are quite good my friend!


  |                                                                            
  |====================================================================  |  97%
| Congrats! We hope you found this lesson deviced well!

...


  |                                                                            
  |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? daniel.drennan@athora.com
What is your assignment token? 8CRLqlv77gug35xO
Grade submission succeeded!

| Excellent work!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: Exploratory Data Analysis
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Principles of Analytic Graphs   2: Exploratory Graphs           
 3: Graphics Devices in R           4: Plotting Systems             
 5: Base Plotting System            6: Lattice Plotting System      
 7: Working with Colors             8: GGPlot2 Part1                
 9: GGPlot2 Part2                  10: GGPlot2 Extras               
11: Hierarchical Clustering        12: K Means Clustering           
13: Dimension Reduction            14: Clustering Example           
15: CaseStudy                      

Selection: 4

| Attempting to load lesson dependencies...

| This lesson requires the ‘ggplot2’ package. Would you like me to install it
| for you now?

1: Yes
2: No

Selection: 1

| Trying to install package ‘ggplot2’ now...
also installing the dependencies ‘colorspace’, ‘farver’, ‘labeling’, ‘munsell’, ‘RColorBrewer’, ‘viridisLite’, ‘gtable’, ‘isoband’, ‘scales’

package ‘colorspace’ successfully unpacked and MD5 sums checked
package ‘farver’ successfully unpacked and MD5 sums checked
package ‘labeling’ successfully unpacked and MD5 sums checked
package ‘munsell’ successfully unpacked and MD5 sums checked
package ‘RColorBrewer’ successfully unpacked and MD5 sums checked
package ‘viridisLite’ successfully unpacked and MD5 sums checked
package ‘gtable’ successfully unpacked and MD5 sums checked
package ‘isoband’ successfully unpacked and MD5 sums checked
package ‘scales’ successfully unpacked and MD5 sums checked
package ‘ggplot2’ successfully unpacked and MD5 sums checked

| Package ‘ggplot2’ loaded correctly!

| Package ‘lattice’ loaded correctly!

| This lesson requires the ‘jpeg’ package. Would you like me to install it for
| you now?

1: Yes
2: No

Selection: insta1
Enter an item from the menu, or 0 to exit
Selection: 1

| Trying to install package ‘jpeg’ now...
package ‘jpeg’ successfully unpacked and MD5 sums checked

| Package ‘jpeg’ loaded correctly!


  |                                                                            
  |                                                                      |   0%

| Plotting_Systems. (Slides for this and other Data Science courses may be
| found at github https://github.com/DataScienceSpecialization/courses/. If you
| care to use them, they must be downloaded as a zip file and viewed locally.
| This lesson corresponds to 04_ExploratoryAnalysis/PlottingSystems.)

...


  |                                                                            
  |==                                                                    |   3%
| In this lesson, we'll give you a brief overview of the three plotting systems
| in R, their differences, strengths, and weaknesses. We'll only cover the
| basics here to give you a general idea of the systems and in later lessons
| we'll cover each system in more depth.

...


  |                                                                            
  |====                                                                  |   5%
| The first plotting system is the Base Plotting System which comes with R.
| It's the oldest system which uses a simple "Artist's palette" model. What
| this means is that you start with a blank canvas and build your plot up from
| there, step by step.

...


  |                                                                            
  |======                                                                |   8%
| Usually you start with a plot function (or something similar), then you use
| annotation functions to add to or modify your plot. R provides many
| annotating functions such as text, lines, points, and axis. R provides
| documentation for each of these. They all add to an already existing plot.

...


  |                                                                            
  |========                                                              |  11%
| What do you think is a disadvantage of the Base Plotting System?

1: A complicated plot is a series of simple R commands
2: You can't go back once a plot has started
3: It's intuitive and exploratory
4: It mirrors how we think of building plots and analyzing data

Selection: 2

| Keep up the great work!


  |                                                                            
  |=========                                                             |  14%
| Yes! The base system is very intuitive and easy to use when you're starting
| to do exploratory graphing and looking for a research direction. You can't go
| backwards, though, say, if you need to readjust margins or fix a misspelled a
| caption. A finished plot will be a series of R commands, so it's difficult to
| translate a finished plot into a different system.

...


  |                                                                            
  |===========                                                           |  16%
| We've loaded the dataset cars for you to demonstrate how easy it is to plot.
| First, use the R command head with cars as an argument to see what the data
| looks like.

> hear(cars)
Error in hear(cars) : could not find function "hear"
> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| Your dedication is inspiring!


  |                                                                            
  |=============                                                         |  19%
| So the dataset collates the speeds and distances needed to stop for 50 cars.
| This data was recorded in the 1920's.

...


  |                                                                            
  |===============                                                       |  22%
| We'll use the R command with which takes two arguments. The first specifies a
| dataset or environment in which to run the second argument, an R expression.
| This will save us a bit of typing. Try running the command with now using
| cars as the first argument and a call to plot as the second. The call to plot
| will take two arguments, speed and dist. Please specify them in that order.

> with(cars, plot(speed, dist))

| You are amazing!


  |                                                                            
  |=================                                                     |  24%
| Simple, right? You can see the relationship between the two variables, speed
| and distance. The first variable is plotted along the x-axis and the second
| along the y-axis.

...


  |                                                                            
  |===================                                                   |  27%
| Now we'll show you what the function text does. Run the command text with
| three arguments. The first two, x and y coordinates, specify the placement of
| the third argument, the text to be added to the plot. Let the first argument
| be mean(cars$speed), the second max(cars$dist), and the third the string
| "SWIRL rules!". Try it now.

> text(mean(cars$speed), max(vars$dist), "SWIRL rules!")
Error in vars$dist : object of type 'closure' is not subsettable
> text(mean(cars$speed), max(cars$dist), "SWIRL rules!")

| That's correct!


  |                                                                            
  |=====================                                                 |  30%
| Ain't it the truth?

...


  |                                                                            
  |=======================                                               |  32%
| Now we'll move on to the second plotting system, the Lattice System which
| comes in the package of the same name. Unlike the Base System, lattice plots
| are created with a single function call such as xyplot or bwplot. Margins and
| spacing are set automatically because the entire plot is specified at once.

...


  |                                                                            
  |=========================                                             |  35%
| The lattice system is most useful for conditioning types of plots which
| display how y changes with x across levels of z. The variable z might be a
| categorical variable of your data. This system is also good for putting many
| plots on a screen at once.

...


  |                                                                            
  |==========================                                            |  38%
| The lattice system has several disadvantages. First, it is sometimes awkward
| to specify an entire plot in a single function call. Annotating a plot may
| not be especially intuitive. Second, using panel functions and subscripts is
| somewhat difficult and requires preparation. Finally, you cannot "add" to the
| plot once it is created as you can with the base system.

...


  |                                                                            
  |============================                                          |  41%
| As before, we've loaded some data for you in the variable state. This data
| comes with the lattice package and it concerns various characteristics of the
| 50 states in the U.S. Use the R command head to see the first few entries of
| state now.

> head(state)
           Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area
Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708
Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432
Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417
Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945
California      21198   5114        1.1    71.71   10.3    62.6    20 156361
Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766
           region
Alabama     South
Alaska       West
Arizona      West
Arkansas    South
California   West
Colorado     West

| All that hard work is paying off!


  |                                                                            
  |==============================                                        |  43%
| As you can see state holds 9 pieces of information for each of the 50 states.
| The last variable, region, specifies a category for each state. Run the R
| command table with the argument state$region to see how many categories there
| are and how many states are in each.

> table(state$region)

    Northeast         South North Central          West 
            9            16            12            13 

| Perseverance, that's the answer.


  |                                                                            
  |================================                                      |  46%
| So there are 4 categories and the 50 states are sorted into them
| appropriately. Let's use the lattice command xyplot to see how life
| expectancy varies with income in each of the four regions.

...


  |                                                                            
  |==================================                                    |  49%
| To do this we'll give xyplot 3 arguments. The first is the most complicated.
| It is this R formula, Life.Exp ~ Income | region, which indicates we're
| plotting life expectancy as it depends on income for each region. The second
| argument, data, is set equal to state. This allows us to use "Life.Exp" and
| "Income" in the formula instead of specifying the dataset state for each term
| (as in state$Income). The third argument, layout, is set equal to the
| two-long vector c(4,1). Run xyplot now with these three arguments.

> 
> xyplt(Life.Exp ~ Income | region, data=state, layout=c(4,1))
Error in xyplt(Life.Exp ~ Income | region, data = state, layout = c(4,  : 
  could not find function "xyplt"
> xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))

| Keep up the great work!


  |                                                                            
  |====================================                                  |  51%
| We see the data for each of the 4 regions plotted in one row. Based on this
| plot, which region of the U.S. seems to have the shortest life expectancy?

1: South
2: Northeast
3: West
4: North Central

Selection: 1

| All that practice is paying off!


  |                                                                            
  |======================================                                |  54%
| Just for fun rerun the xyplot and this time set layout to the vector c(2,2).
| To save typing use the up arrow to recover the previous xyplot command.

> xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))

| You got it right!


  |                                                                            
  |========================================                              |  57%
| See how the plot changed? No need for you to worry about margins or labels.
| The package took care of all that for you.

...


  |                                                                            
  |==========================================                            |  59%
| Now for the last plotting system, ggplot2, which is a hybrid of the base and
| lattice systems. It automatically deals with spacing, text, titles (as
| Lattice does) but also allows you to annotate by "adding" to a plot (as Base
| does), so it's the best of both worlds.

...


  |                                                                            
  |============================================                          |  62%
| Although ggplot2 bears a superficial similarity to lattice, it's generally
| easier and more intuitive to use. Its default mode makes many choices for you
| but you can still customize a lot. The package is based on a "grammar of
| graphics" (hence the gg in the name), so you can control the aesthetics of
| your plots. For instance, you can plot conditioning graphs and panel plots as
| we did in the lattice example.

...


  |                                                                            
  |=============================================                         |  65%
| We'll see an example now of ggplot2 with a simple (single) command. As
| before, we've loaded a dataset for you from the ggplot2 package. This mpg
| data holds fuel economy data between 1999 and 2008 for 38 different models of
| cars. Run head with mpg as an argument so you get an idea of what the data
| looks like.

> head(mpg)
# A tibble: 6 x 11
  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class 
  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr> 
1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa~
2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa~
3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa~
4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa~
5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa~
6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa~

| That's a job well done!


  |                                                                            
  |===============================================                       |  68%
| Looks complicated. Run dim with the argument mpg to see how big the dataset
| is.

> dim(mpg)
[1] 234  11

| You got it!


  |                                                                            
  |=================================================                     |  70%
| Holy cow! That's a lot of information for just 38 models of cars. Run the R
| command table with the argument mpg$model. This will tell us how many models
| of cars we're dealing with.

> table(mpg$model)

           4runner 4wd                     a4             a4 quattro 
                     6                      7                      8 
            a6 quattro                 altima     c1500 suburban 2wd 
                     3                      6                      5 
                 camry           camry solara            caravan 2wd 
                     7                      7                     11 
                 civic                corolla               corvette 
                     9                      5                      5 
     dakota pickup 4wd            durango 4wd         expedition 2wd 
                     9                      7                      3 
          explorer 4wd        f150 pickup 4wd           forester awd 
                     6                      7                      6 
    grand cherokee 4wd             grand prix                    gti 
                     8                      5                      5 
           impreza awd                  jetta        k1500 tahoe 4wd 
                     8                      9                      4 
land cruiser wagon 4wd                 malibu                 maxima 
                     2                      5                      3 
       mountaineer 4wd                mustang          navigator 2wd 
                     4                      9                      3 
            new beetle                 passat         pathfinder 4wd 
                     6                      7                      4 
   ram 1500 pickup 4wd            range rover                 sonata 
                    10                      4                      7 
               tiburon      toyota tacoma 4wd 
                     7                      7 

| You're the best!


  |                                                                            
  |===================================================                   |  73%
| Oh, there are 38 models. We're interested in the effect engine displacement
| (displ) has on highway gas mileage (hwy), so we'll use the ggplot2 command
| qplot to display this relationship. Run qplot now with three arguments. The
| first two are the variables displ and hwy we want to plot, and the third is
| the argument data set equal to mpg. As before, this allows us to avoid using
| the mpg$variable notation for the first two arguments.

> qplot(displ, hwy, data=mpg)

| That's correct!


  |                                                                            
  |=====================================================                 |  76%
| Not surprisingly we see that the bigger the engine displacement the lower the
| gas mileage.

...


  |                                                                            
  |=======================================================               |  78%
| Let's review!

...


  |                                                                            
  |=========================================================             |  81%
| Which R plotting system is based on an artist's palette?

1: base
2: Winsor&Newton
3: lattice
4: ggplot2

Selection: 1

| That's a job well done!


  |                                                                            
  |===========================================================           |  84%
| Which R plotting system does NOT allow you to annotate plots with separate
| calls?

1: lattice
2: base
3: ggplot2
4: Winsor&Newton

Selection: 1

| You nailed it! Good job!


  |                                                                            
  |=============================================================         |  86%
| Which R plotting system combines the best features of the other two?

1: lattice
2: ggplot2
3: base
4: Winsor&Newton

Selection: 2

| You're the best!


  |                                                                            
  |==============================================================        |  89%
| Which R plotting system uses a graphics grammar?

1: lattice
2: Winsor&Newton
3: base
4: ggplot2

Selection: 4

| That's correct!


  |                                                                            
  |================================================================      |  92%
| Which R plotting system forces you to make your entire plot with one call?

1: Winsor&Newton
2: base
3: lattice
4: ggplot2

Selection: 3

| You got it!


  |                                                                            
  |==================================================================    |  95%
| Which of the following sells high quality artists' brushes?

1: lattice
2: Winsor&Newton
3: base
4: ggplot2

Selection: 2

| Great job!


  |                                                                            
  |====================================================================  |  97%
| Congrats! You've concluded this plotting lesson. We hope you didn't find it
| plodding.

...


  |                                                                            
  |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 2
What is your email address? daniel.drennan@athora.com
What is your assignment token? DqYTxupabrqF9DU6
Grade submission succeeded!

| That's the answer I was looking for.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: Exploratory Data Analysis
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Principles of Analytic Graphs   2: Exploratory Graphs           
 3: Graphics Devices in R           4: Plotting Systems             
 5: Base Plotting System            6: Lattice Plotting System      
 7: Working with Colors             8: GGPlot2 Part1                
 9: GGPlot2 Part2                  10: GGPlot2 Extras               
11: Hierarchical Clustering        12: K Means Clustering           
13: Dimension Reduction            14: Clustering Example           
15: CaseStudy                      

Selection: 5

  |                                                                            
  |                                                                      |   0%

| Base_Plotting_System. (Slides for this and other Data Science courses may be
| found at github https://github.com/DataScienceSpecialization/courses/. If you
| care to use them, they must be downloaded as a zip file and viewed locally.
| This lesson corresponds to 04_ExploratoryAnalysis/PlottingBase.)

...


  |                                                                            
  |=                                                                     |   2%
| In another lesson, we gave you an overview of the three plotting systems in
| R. In this lesson we'll focus on the base plotting system and talk more about
| how you can exploit all its many parameters to get the plot you want.  We'll
| focus on using the base plotting system to create graphics on the screen
| device rather than another graphics device.

...


  |                                                                            
  |==                                                                    |   3%
| The core plotting and graphics engine in R is encapsulated in two packages.
| The first is the graphics package which contains plotting functions for the
| "base" system. The functions in this package include plot, hist, boxplot,
| barplot, etc. The second package is grDevices which contains all the code
| implementing the various graphics devices, including X11, PDF, PostScript,
| PNG, etc.

...


  |                                                                            
  |===                                                                   |   5%
| Base graphics are often constructed piecemeal, with each aspect of the plot
| handled separately through a particular function call. Usually you start with
| a plot function (such as plot, hist, or boxplot), then you use annotation
| functions (text, abline, points) to add to or modify your plot.

...


  |                                                                            
  |====                                                                  |   6%
| Before making a plot you have to determine where the plot will appear and
| what it will be used for.  Is there a large amount of data going into the
| plot? Or is it just a few points? Do you need to be able to dynamically
| resize the graphic?

...


  |                                                                            
  |=====                                                                 |   8%
| What do you think is a disadvantage of the Base Plotting System?

1: You can't go back once a plot has started
2: It's intuitive and exploratory
3: A complicated plot is a series of simple R commands
4: It mirrors how we think of building plots and analyzing data

Selection: 1

| Keep working like that and you'll get there!


  |                                                                            
  |======                                                                |   9%
| Yes! The base system is very intuitive and easy to use. You can't go
| backwards, though, say, if you need to readjust margins or have misspelled a
| caption. A finished plot will be a series of R commands, so it's difficult to
| translate a finished plot into a different system.

...


  |                                                                            
  |=======                                                               |  11%
| Calling a basic routine such as plot(x, y) or hist(x) launches a graphics
| device (if one is not already open) and draws a new plot on the device. If
| the arguments to plot or hist are not of some special class, then the default
| method is called.

...


  |                                                                            
  |========                                                              |  12%
| As you'll see, most of the base plotting functions have many arguments, for
| example, setting the title, labels of axes, plot character, etc. Some of the
| parameters can be set when you call the function or they can be added later
| in a separate function call.

...


  |                                                                            
  |==========                                                            |  14%
| Now we'll go through some quick examples of basic plotting before we delve
| into gory details. We'll use the dataset airquality (part of the library
| datasets) which we've loaded for you. This shows ozone and other air
| measurements for New York City for 5 months in 1973.

...


  |                                                                            
  |===========                                                           |  15%
| Use the R command head with airquality as an argument to see what the data
| looks like.

> head(airquality)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6

| You nailed it! Good job!


  |                                                                            
  |============                                                          |  17%
| We see the dataset contains 6 columns of data. Run the command range with two
| arguments. The first is the ozone column of airquality, specified by
| airquality$Ozone, and the second is the boolean na.rm set equal to TRUE. If
| you don't specify this second argument, you won't get a meaningful result.

> range(aitquality$Ozone, na.rm=TRUE)
Error: object 'aitquality' not found
> range(airquality$Ozone, na.rm=TRUE)
[1]   1 168

| All that hard work is paying off!


  |                                                                            
  |=============                                                         |  18%
| So the measurements range from 1 to 168. First we'll do a simple histogram of
| this ozone column to show the distribution of measurements. Use the R command
| hist with the argument airquality$Ozone.

> hist(airquality$Ozone)

| That's a job well done!


  |                                                                            
  |==============                                                        |  20%
| Simple, right? R put a title on the histogram and labeled both axes for you.
| What is the most frequent count?

1: Under 25
2: Over 150
3: Between 60 and 75
4: Over 100

Selection: !play()
Enter an item from the menu, or 0 to exit
Selection: 



R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> airquality
    Ozone Solar.R Wind Temp Month Day
1      41     190  7.4   67     5   1
2      36     118  8.0   72     5   2
3      12     149 12.6   74     5   3
4      18     313 11.5   62     5   4
5      NA      NA 14.3   56     5   5
6      28      NA 14.9   66     5   6
7      23     299  8.6   65     5   7
8      19      99 13.8   59     5   8
9       8      19 20.1   61     5   9
10     NA     194  8.6   69     5  10
11      7      NA  6.9   74     5  11
12     16     256  9.7   69     5  12
13     11     290  9.2   66     5  13
14     14     274 10.9   68     5  14
15     18      65 13.2   58     5  15
16     14     334 11.5   64     5  16
17     34     307 12.0   66     5  17
18      6      78 18.4   57     5  18
19     30     322 11.5   68     5  19
20     11      44  9.7   62     5  20
21      1       8  9.7   59     5  21
22     11     320 16.6   73     5  22
23      4      25  9.7   61     5  23
24     32      92 12.0   61     5  24
25     NA      66 16.6   57     5  25
26     NA     266 14.9   58     5  26
27     NA      NA  8.0   57     5  27
28     23      13 12.0   67     5  28
29     45     252 14.9   81     5  29
30    115     223  5.7   79     5  30
31     37     279  7.4   76     5  31
32     NA     286  8.6   78     6   1
33     NA     287  9.7   74     6   2
34     NA     242 16.1   67     6   3
35     NA     186  9.2   84     6   4
36     NA     220  8.6   85     6   5
37     NA     264 14.3   79     6   6
38     29     127  9.7   82     6   7
39     NA     273  6.9   87     6   8
40     71     291 13.8   90     6   9
41     39     323 11.5   87     6  10
42     NA     259 10.9   93     6  11
43     NA     250  9.2   92     6  12
44     23     148  8.0   82     6  13
45     NA     332 13.8   80     6  14
46     NA     322 11.5   79     6  15
47     21     191 14.9   77     6  16
48     37     284 20.7   72     6  17
49     20      37  9.2   65     6  18
50     12     120 11.5   73     6  19
51     13     137 10.3   76     6  20
52     NA     150  6.3   77     6  21
53     NA      59  1.7   76     6  22
54     NA      91  4.6   76     6  23
55     NA     250  6.3   76     6  24
56     NA     135  8.0   75     6  25
57     NA     127  8.0   78     6  26
58     NA      47 10.3   73     6  27
59     NA      98 11.5   80     6  28
60     NA      31 14.9   77     6  29
61     NA     138  8.0   83     6  30
62    135     269  4.1   84     7   1
63     49     248  9.2   85     7   2
64     32     236  9.2   81     7   3
65     NA     101 10.9   84     7   4
66     64     175  4.6   83     7   5
67     40     314 10.9   83     7   6
68     77     276  5.1   88     7   7
69     97     267  6.3   92     7   8
70     97     272  5.7   92     7   9
71     85     175  7.4   89     7  10
72     NA     139  8.6   82     7  11
73     10     264 14.3   73     7  12
74     27     175 14.9   81     7  13
75     NA     291 14.9   91     7  14
76      7      48 14.3   80     7  15
77     48     260  6.9   81     7  16
78     35     274 10.3   82     7  17
79     61     285  6.3   84     7  18
80     79     187  5.1   87     7  19
81     63     220 11.5   85     7  20
82     16       7  6.9   74     7  21
83     NA     258  9.7   81     7  22
84     NA     295 11.5   82     7  23
85     80     294  8.6   86     7  24
86    108     223  8.0   85     7  25
87     20      81  8.6   82     7  26
88     52      82 12.0   86     7  27
89     82     213  7.4   88     7  28
90     50     275  7.4   86     7  29
91     64     253  7.4   83     7  30
92     59     254  9.2   81     7  31
93     39      83  6.9   81     8   1
94      9      24 13.8   81     8   2
95     16      77  7.4   82     8   3
96     78      NA  6.9   86     8   4
97     35      NA  7.4   85     8   5
98     66      NA  4.6   87     8   6
99    122     255  4.0   89     8   7
100    89     229 10.3   90     8   8
101   110     207  8.0   90     8   9
102    NA     222  8.6   92     8  10
103    NA     137 11.5   86     8  11
104    44     192 11.5   86     8  12
105    28     273 11.5   82     8  13
106    65     157  9.7   80     8  14
107    NA      64 11.5   79     8  15
108    22      71 10.3   77     8  16
109    59      51  6.3   79     8  17
110    23     115  7.4   76     8  18
111    31     244 10.9   78     8  19
112    44     190 10.3   78     8  20
113    21     259 15.5   77     8  21
114     9      36 14.3   72     8  22
115    NA     255 12.6   75     8  23
116    45     212  9.7   79     8  24
117   168     238  3.4   81     8  25
118    73     215  8.0   86     8  26
119    NA     153  5.7   88     8  27
120    76     203  9.7   97     8  28
121   118     225  2.3   94     8  29
122    84     237  6.3   96     8  30
123    85     188  6.3   94     8  31
124    96     167  6.9   91     9   1
125    78     197  5.1   92     9   2
126    73     183  2.8   93     9   3
127    91     189  4.6   93     9   4
128    47      95  7.4   87     9   5
129    32      92 15.5   84     9   6
130    20     252 10.9   80     9   7
131    23     220 10.3   78     9   8
132    21     230 10.9   75     9   9
133    24     259  9.7   73     9  10
134    44     236 14.9   81     9  11
135    21     259 15.5   76     9  12
136    28     238  6.3   77     9  13
137     9      24 10.9   71     9  14
138    13     112 11.5   71     9  15
139    46     237  6.9   78     9  16
140    18     224 13.8   67     9  17
141    13      27 10.3   76     9  18
142    24     238 10.3   68     9  19
143    16     201  8.0   82     9  20
144    13     238 12.6   64     9  21
145    23      14  9.2   71     9  22
146    36     139 10.3   81     9  23
147     7      49 10.3   69     9  24
148    14      20 16.6   63     9  25
149    30     193  6.9   70     9  26
150    NA     145 13.2   77     9  27
151    14     191 14.3   75     9  28
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> head(airquality)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6
> library("swirl")

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swilr()
Error in swilr() : could not find function "swilr"
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Daniel

| Would you like to continue with one of these lessons?

1: Exploratory Data Analysis Base Plotting System
2: No. Let me start something new.

Selection: 1


| Simple, right? R put a title on the histogram and labeled both axes for you.
| What is the most frequent count?

1: Between 60 and 75
2: Over 150
3: Over 100
4: Under 25

Selection: range(airquality$Ozone, na.rm=TRUE)
Enter an item from the menu, or 0 to exit
Selection: hist(airquality$Ozone)
Enter an item from the menu, or 0 to exit
Selection: 0

| One more time. You can do it!

| Where is the highest bar?

1: Under 25
2: Over 150
3: Over 100
4: Between 60 and 75

Selection: 0

| Not quite! Try again.

| Where is the highest bar?

1: Under 25
2: Over 100
3: Between 60 and 75
4: Over 150

Selection: hist(airquality$Ozone)
Enter an item from the menu, or 0 to exit
Selection: hist(airquality$Ozone)
Enter an item from the menu, or 0 to exit
Selection: quit()
Enter an item from the menu, or 0 to exit

Warning message:
In data(mpg) : data set ‘mpg’ not found

| Leaving swirl now. Type swirl() to resume.

Selection: > hist(airquality$Ozone)
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Daniel

| Would you like to continue with one of these lessons?

1: Exploratory Data Analysis Base Plotting System
2: No. Let me start something new.

Selection: 1


| Simple, right? R put a title on the histogram and labeled both axes for you.
| What is the most frequent count?

1: Over 150
2: Over 100
3: Between 60 and 75
4: Under 25

Selection: 4

| Excellent work!


  |                                                                            
  |===============                                                       |  21%
| Next we'll do a boxplot. First, though, run the R command table with the
| argument airquality$Month.

warning messages from top-level task callback 'mini'
Warning message:
In data(mpg) : data set ‘mpg’ not found
> mpg
    manufacturer                  model displ year cyl      trans drv cty hwy
1           audi                     a4   1.8 1999   4   auto(l5)   f  18  29
2           audi                     a4   1.8 1999   4 manual(m5)   f  21  29
3           audi                     a4   2.0 2008   4 manual(m6)   f  20  31
4           audi                     a4   2.0 2008   4   auto(av)   f  21  30
5           audi                     a4   2.8 1999   6   auto(l5)   f  16  26
6           audi                     a4   2.8 1999   6 manual(m5)   f  18  26
7           audi                     a4   3.1 2008   6   auto(av)   f  18  27
8           audi             a4 quattro   1.8 1999   4 manual(m5)   4  18  26
9           audi             a4 quattro   1.8 1999   4   auto(l5)   4  16  25
10          audi             a4 quattro   2.0 2008   4 manual(m6)   4  20  28
11          audi             a4 quattro   2.0 2008   4   auto(s6)   4  19  27
12          audi             a4 quattro   2.8 1999   6   auto(l5)   4  15  25
13          audi             a4 quattro   2.8 1999   6 manual(m5)   4  17  25
14          audi             a4 quattro   3.1 2008   6   auto(s6)   4  17  25
15          audi             a4 quattro   3.1 2008   6 manual(m6)   4  15  25
16          audi             a6 quattro   2.8 1999   6   auto(l5)   4  15  24
17          audi             a6 quattro   3.1 2008   6   auto(s6)   4  17  25
18          audi             a6 quattro   4.2 2008   8   auto(s6)   4  16  23
19     chevrolet     c1500 suburban 2wd   5.3 2008   8   auto(l4)   r  14  20
20     chevrolet     c1500 suburban 2wd   5.3 2008   8   auto(l4)   r  11  15
21     chevrolet     c1500 suburban 2wd   5.3 2008   8   auto(l4)   r  14  20
22     chevrolet     c1500 suburban 2wd   5.7 1999   8   auto(l4)   r  13  17
23     chevrolet     c1500 suburban 2wd   6.0 2008   8   auto(l4)   r  12  17
24     chevrolet               corvette   5.7 1999   8 manual(m6)   r  16  26
25     chevrolet               corvette   5.7 1999   8   auto(l4)   r  15  23
26     chevrolet               corvette   6.2 2008   8 manual(m6)   r  16  26
27     chevrolet               corvette   6.2 2008   8   auto(s6)   r  15  25
28     chevrolet               corvette   7.0 2008   8 manual(m6)   r  15  24
29     chevrolet        k1500 tahoe 4wd   5.3 2008   8   auto(l4)   4  14  19
30     chevrolet        k1500 tahoe 4wd   5.3 2008   8   auto(l4)   4  11  14
31     chevrolet        k1500 tahoe 4wd   5.7 1999   8   auto(l4)   4  11  15
32     chevrolet        k1500 tahoe 4wd   6.5 1999   8   auto(l4)   4  14  17
33     chevrolet                 malibu   2.4 1999   4   auto(l4)   f  19  27
34     chevrolet                 malibu   2.4 2008   4   auto(l4)   f  22  30
35     chevrolet                 malibu   3.1 1999   6   auto(l4)   f  18  26
36     chevrolet                 malibu   3.5 2008   6   auto(l4)   f  18  29
37     chevrolet                 malibu   3.6 2008   6   auto(s6)   f  17  26
38         dodge            caravan 2wd   2.4 1999   4   auto(l3)   f  18  24
39         dodge            caravan 2wd   3.0 1999   6   auto(l4)   f  17  24
40         dodge            caravan 2wd   3.3 1999   6   auto(l4)   f  16  22
41         dodge            caravan 2wd   3.3 1999   6   auto(l4)   f  16  22
42         dodge            caravan 2wd   3.3 2008   6   auto(l4)   f  17  24
43         dodge            caravan 2wd   3.3 2008   6   auto(l4)   f  17  24
44         dodge            caravan 2wd   3.3 2008   6   auto(l4)   f  11  17
45         dodge            caravan 2wd   3.8 1999   6   auto(l4)   f  15  22
46         dodge            caravan 2wd   3.8 1999   6   auto(l4)   f  15  21
47         dodge            caravan 2wd   3.8 2008   6   auto(l6)   f  16  23
48         dodge            caravan 2wd   4.0 2008   6   auto(l6)   f  16  23
49         dodge      dakota pickup 4wd   3.7 2008   6 manual(m6)   4  15  19
50         dodge      dakota pickup 4wd   3.7 2008   6   auto(l4)   4  14  18
51         dodge      dakota pickup 4wd   3.9 1999   6   auto(l4)   4  13  17
52         dodge      dakota pickup 4wd   3.9 1999   6 manual(m5)   4  14  17
53         dodge      dakota pickup 4wd   4.7 2008   8   auto(l5)   4  14  19
54         dodge      dakota pickup 4wd   4.7 2008   8   auto(l5)   4  14  19
55         dodge      dakota pickup 4wd   4.7 2008   8   auto(l5)   4   9  12
56         dodge      dakota pickup 4wd   5.2 1999   8 manual(m5)   4  11  17
57         dodge      dakota pickup 4wd   5.2 1999   8   auto(l4)   4  11  15
58         dodge            durango 4wd   3.9 1999   6   auto(l4)   4  13  17
59         dodge            durango 4wd   4.7 2008   8   auto(l5)   4  13  17
60         dodge            durango 4wd   4.7 2008   8   auto(l5)   4   9  12
61         dodge            durango 4wd   4.7 2008   8   auto(l5)   4  13  17
62         dodge            durango 4wd   5.2 1999   8   auto(l4)   4  11  16
63         dodge            durango 4wd   5.7 2008   8   auto(l5)   4  13  18
64         dodge            durango 4wd   5.9 1999   8   auto(l4)   4  11  15
65         dodge    ram 1500 pickup 4wd   4.7 2008   8 manual(m6)   4  12  16
66         dodge    ram 1500 pickup 4wd   4.7 2008   8   auto(l5)   4   9  12
67         dodge    ram 1500 pickup 4wd   4.7 2008   8   auto(l5)   4  13  17
68         dodge    ram 1500 pickup 4wd   4.7 2008   8   auto(l5)   4  13  17
69         dodge    ram 1500 pickup 4wd   4.7 2008   8 manual(m6)   4  12  16
70         dodge    ram 1500 pickup 4wd   4.7 2008   8 manual(m6)   4   9  12
71         dodge    ram 1500 pickup 4wd   5.2 1999   8   auto(l4)   4  11  15
72         dodge    ram 1500 pickup 4wd   5.2 1999   8 manual(m5)   4  11  16
73         dodge    ram 1500 pickup 4wd   5.7 2008   8   auto(l5)   4  13  17
74         dodge    ram 1500 pickup 4wd   5.9 1999   8   auto(l4)   4  11  15
75          ford         expedition 2wd   4.6 1999   8   auto(l4)   r  11  17
76          ford         expedition 2wd   5.4 1999   8   auto(l4)   r  11  17
77          ford         expedition 2wd   5.4 2008   8   auto(l6)   r  12  18
78          ford           explorer 4wd   4.0 1999   6   auto(l5)   4  14  17
79          ford           explorer 4wd   4.0 1999   6 manual(m5)   4  15  19
80          ford           explorer 4wd   4.0 1999   6   auto(l5)   4  14  17
81          ford           explorer 4wd   4.0 2008   6   auto(l5)   4  13  19
82          ford           explorer 4wd   4.6 2008   8   auto(l6)   4  13  19
83          ford           explorer 4wd   5.0 1999   8   auto(l4)   4  13  17
84          ford        f150 pickup 4wd   4.2 1999   6   auto(l4)   4  14  17
85          ford        f150 pickup 4wd   4.2 1999   6 manual(m5)   4  14  17
86          ford        f150 pickup 4wd   4.6 1999   8 manual(m5)   4  13  16
87          ford        f150 pickup 4wd   4.6 1999   8   auto(l4)   4  13  16
88          ford        f150 pickup 4wd   4.6 2008   8   auto(l4)   4  13  17
89          ford        f150 pickup 4wd   5.4 1999   8   auto(l4)   4  11  15
90          ford        f150 pickup 4wd   5.4 2008   8   auto(l4)   4  13  17
91          ford                mustang   3.8 1999   6 manual(m5)   r  18  26
92          ford                mustang   3.8 1999   6   auto(l4)   r  18  25
93          ford                mustang   4.0 2008   6 manual(m5)   r  17  26
94          ford                mustang   4.0 2008   6   auto(l5)   r  16  24
95          ford                mustang   4.6 1999   8   auto(l4)   r  15  21
96          ford                mustang   4.6 1999   8 manual(m5)   r  15  22
97          ford                mustang   4.6 2008   8 manual(m5)   r  15  23
98          ford                mustang   4.6 2008   8   auto(l5)   r  15  22
99          ford                mustang   5.4 2008   8 manual(m6)   r  14  20
100        honda                  civic   1.6 1999   4 manual(m5)   f  28  33
101        honda                  civic   1.6 1999   4   auto(l4)   f  24  32
102        honda                  civic   1.6 1999   4 manual(m5)   f  25  32
103        honda                  civic   1.6 1999   4 manual(m5)   f  23  29
104        honda                  civic   1.6 1999   4   auto(l4)   f  24  32
105        honda                  civic   1.8 2008   4 manual(m5)   f  26  34
106        honda                  civic   1.8 2008   4   auto(l5)   f  25  36
107        honda                  civic   1.8 2008   4   auto(l5)   f  24  36
108        honda                  civic   2.0 2008   4 manual(m6)   f  21  29
109      hyundai                 sonata   2.4 1999   4   auto(l4)   f  18  26
110      hyundai                 sonata   2.4 1999   4 manual(m5)   f  18  27
111      hyundai                 sonata   2.4 2008   4   auto(l4)   f  21  30
112      hyundai                 sonata   2.4 2008   4 manual(m5)   f  21  31
113      hyundai                 sonata   2.5 1999   6   auto(l4)   f  18  26
114      hyundai                 sonata   2.5 1999   6 manual(m5)   f  18  26
115      hyundai                 sonata   3.3 2008   6   auto(l5)   f  19  28
116      hyundai                tiburon   2.0 1999   4   auto(l4)   f  19  26
117      hyundai                tiburon   2.0 1999   4 manual(m5)   f  19  29
118      hyundai                tiburon   2.0 2008   4 manual(m5)   f  20  28
119      hyundai                tiburon   2.0 2008   4   auto(l4)   f  20  27
120      hyundai                tiburon   2.7 2008   6   auto(l4)   f  17  24
121      hyundai                tiburon   2.7 2008   6 manual(m6)   f  16  24
122      hyundai                tiburon   2.7 2008   6 manual(m5)   f  17  24
123         jeep     grand cherokee 4wd   3.0 2008   6   auto(l5)   4  17  22
124         jeep     grand cherokee 4wd   3.7 2008   6   auto(l5)   4  15  19
125         jeep     grand cherokee 4wd   4.0 1999   6   auto(l4)   4  15  20
126         jeep     grand cherokee 4wd   4.7 1999   8   auto(l4)   4  14  17
127         jeep     grand cherokee 4wd   4.7 2008   8   auto(l5)   4   9  12
128         jeep     grand cherokee 4wd   4.7 2008   8   auto(l5)   4  14  19
129         jeep     grand cherokee 4wd   5.7 2008   8   auto(l5)   4  13  18
130         jeep     grand cherokee 4wd   6.1 2008   8   auto(l5)   4  11  14
131   land rover            range rover   4.0 1999   8   auto(l4)   4  11  15
132   land rover            range rover   4.2 2008   8   auto(s6)   4  12  18
133   land rover            range rover   4.4 2008   8   auto(s6)   4  12  18
134   land rover            range rover   4.6 1999   8   auto(l4)   4  11  15
135      lincoln          navigator 2wd   5.4 1999   8   auto(l4)   r  11  17
136      lincoln          navigator 2wd   5.4 1999   8   auto(l4)   r  11  16
137      lincoln          navigator 2wd   5.4 2008   8   auto(l6)   r  12  18
138      mercury        mountaineer 4wd   4.0 1999   6   auto(l5)   4  14  17
139      mercury        mountaineer 4wd   4.0 2008   6   auto(l5)   4  13  19
140      mercury        mountaineer 4wd   4.6 2008   8   auto(l6)   4  13  19
141      mercury        mountaineer 4wd   5.0 1999   8   auto(l4)   4  13  17
142       nissan                 altima   2.4 1999   4 manual(m5)   f  21  29
143       nissan                 altima   2.4 1999   4   auto(l4)   f  19  27
144       nissan                 altima   2.5 2008   4   auto(av)   f  23  31
145       nissan                 altima   2.5 2008   4 manual(m6)   f  23  32
146       nissan                 altima   3.5 2008   6 manual(m6)   f  19  27
147       nissan                 altima   3.5 2008   6   auto(av)   f  19  26
148       nissan                 maxima   3.0 1999   6   auto(l4)   f  18  26
149       nissan                 maxima   3.0 1999   6 manual(m5)   f  19  25
150       nissan                 maxima   3.5 2008   6   auto(av)   f  19  25
151       nissan         pathfinder 4wd   3.3 1999   6   auto(l4)   4  14  17
152       nissan         pathfinder 4wd   3.3 1999   6 manual(m5)   4  15  17
153       nissan         pathfinder 4wd   4.0 2008   6   auto(l5)   4  14  20
154       nissan         pathfinder 4wd   5.6 2008   8   auto(s5)   4  12  18
155      pontiac             grand prix   3.1 1999   6   auto(l4)   f  18  26
156      pontiac             grand prix   3.8 1999   6   auto(l4)   f  16  26
157      pontiac             grand prix   3.8 1999   6   auto(l4)   f  17  27
158      pontiac             grand prix   3.8 2008   6   auto(l4)   f  18  28
159      pontiac             grand prix   5.3 2008   8   auto(s4)   f  16  25
160       subaru           forester awd   2.5 1999   4 manual(m5)   4  18  25
161       subaru           forester awd   2.5 1999   4   auto(l4)   4  18  24
162       subaru           forester awd   2.5 2008   4 manual(m5)   4  20  27
163       subaru           forester awd   2.5 2008   4 manual(m5)   4  19  25
164       subaru           forester awd   2.5 2008   4   auto(l4)   4  20  26
165       subaru           forester awd   2.5 2008   4   auto(l4)   4  18  23
166       subaru            impreza awd   2.2 1999   4   auto(l4)   4  21  26
167       subaru            impreza awd   2.2 1999   4 manual(m5)   4  19  26
168       subaru            impreza awd   2.5 1999   4 manual(m5)   4  19  26
169       subaru            impreza awd   2.5 1999   4   auto(l4)   4  19  26
170       subaru            impreza awd   2.5 2008   4   auto(s4)   4  20  25
171       subaru            impreza awd   2.5 2008   4   auto(s4)   4  20  27
172       subaru            impreza awd   2.5 2008   4 manual(m5)   4  19  25
173       subaru            impreza awd   2.5 2008   4 manual(m5)   4  20  27
174       toyota            4runner 4wd   2.7 1999   4 manual(m5)   4  15  20
175       toyota            4runner 4wd   2.7 1999   4   auto(l4)   4  16  20
176       toyota            4runner 4wd   3.4 1999   6   auto(l4)   4  15  19
177       toyota            4runner 4wd   3.4 1999   6 manual(m5)   4  15  17
178       toyota            4runner 4wd   4.0 2008   6   auto(l5)   4  16  20
179       toyota            4runner 4wd   4.7 2008   8   auto(l5)   4  14  17
180       toyota                  camry   2.2 1999   4 manual(m5)   f  21  29
181       toyota                  camry   2.2 1999   4   auto(l4)   f  21  27
182       toyota                  camry   2.4 2008   4 manual(m5)   f  21  31
183       toyota                  camry   2.4 2008   4   auto(l5)   f  21  31
184       toyota                  camry   3.0 1999   6   auto(l4)   f  18  26
185       toyota                  camry   3.0 1999   6 manual(m5)   f  18  26
186       toyota                  camry   3.5 2008   6   auto(s6)   f  19  28
187       toyota           camry solara   2.2 1999   4   auto(l4)   f  21  27
188       toyota           camry solara   2.2 1999   4 manual(m5)   f  21  29
189       toyota           camry solara   2.4 2008   4 manual(m5)   f  21  31
190       toyota           camry solara   2.4 2008   4   auto(s5)   f  22  31
191       toyota           camry solara   3.0 1999   6   auto(l4)   f  18  26
192       toyota           camry solara   3.0 1999   6 manual(m5)   f  18  26
193       toyota           camry solara   3.3 2008   6   auto(s5)   f  18  27
194       toyota                corolla   1.8 1999   4   auto(l3)   f  24  30
195       toyota                corolla   1.8 1999   4   auto(l4)   f  24  33
196       toyota                corolla   1.8 1999   4 manual(m5)   f  26  35
197       toyota                corolla   1.8 2008   4 manual(m5)   f  28  37
198       toyota                corolla   1.8 2008   4   auto(l4)   f  26  35
199       toyota land cruiser wagon 4wd   4.7 1999   8   auto(l4)   4  11  15
200       toyota land cruiser wagon 4wd   5.7 2008   8   auto(s6)   4  13  18
201       toyota      toyota tacoma 4wd   2.7 1999   4 manual(m5)   4  15  20
202       toyota      toyota tacoma 4wd   2.7 1999   4   auto(l4)   4  16  20
203       toyota      toyota tacoma 4wd   2.7 2008   4 manual(m5)   4  17  22
204       toyota      toyota tacoma 4wd   3.4 1999   6 manual(m5)   4  15  17
205       toyota      toyota tacoma 4wd   3.4 1999   6   auto(l4)   4  15  19
206       toyota      toyota tacoma 4wd   4.0 2008   6 manual(m6)   4  15  18
207       toyota      toyota tacoma 4wd   4.0 2008   6   auto(l5)   4  16  20
208   volkswagen                    gti   2.0 1999   4 manual(m5)   f  21  29
209   volkswagen                    gti   2.0 1999   4   auto(l4)   f  19  26
210   volkswagen                    gti   2.0 2008   4 manual(m6)   f  21  29
211   volkswagen                    gti   2.0 2008   4   auto(s6)   f  22  29
212   volkswagen                    gti   2.8 1999   6 manual(m5)   f  17  24
213   volkswagen                  jetta   1.9 1999   4 manual(m5)   f  33  44
214   volkswagen                  jetta   2.0 1999   4 manual(m5)   f  21  29
215   volkswagen                  jetta   2.0 1999   4   auto(l4)   f  19  26
216   volkswagen                  jetta   2.0 2008   4   auto(s6)   f  22  29
217   volkswagen                  jetta   2.0 2008   4 manual(m6)   f  21  29
218   volkswagen                  jetta   2.5 2008   5   auto(s6)   f  21  29
219   volkswagen                  jetta   2.5 2008   5 manual(m5)   f  21  29
220   volkswagen                  jetta   2.8 1999   6   auto(l4)   f  16  23
221   volkswagen                  jetta   2.8 1999   6 manual(m5)   f  17  24
222   volkswagen             new beetle   1.9 1999   4 manual(m5)   f  35  44
223   volkswagen             new beetle   1.9 1999   4   auto(l4)   f  29  41
224   volkswagen             new beetle   2.0 1999   4 manual(m5)   f  21  29
225   volkswagen             new beetle   2.0 1999   4   auto(l4)   f  19  26
226   volkswagen             new beetle   2.5 2008   5 manual(m5)   f  20  28
227   volkswagen             new beetle   2.5 2008   5   auto(s6)   f  20  29
228   volkswagen                 passat   1.8 1999   4 manual(m5)   f  21  29
229   volkswagen                 passat   1.8 1999   4   auto(l5)   f  18  29
230   volkswagen                 passat   2.0 2008   4   auto(s6)   f  19  28
231   volkswagen                 passat   2.0 2008   4 manual(m6)   f  21  29
232   volkswagen                 passat   2.8 1999   6   auto(l5)   f  16  26
233   volkswagen                 passat   2.8 1999   6 manual(m5)   f  18  26
234   volkswagen                 passat   3.6 2008   6   auto(s6)   f  17  26
    fl      class
1    p    compact
2    p    compact
3    p    compact
4    p    compact
5    p    compact
6    p    compact
7    p    compact
8    p    compact
9    p    compact
10   p    compact
11   p    compact
12   p    compact
13   p    compact
14   p    compact
15   p    compact
16   p    midsize
17   p    midsize
18   p    midsize
19   r        suv
20   e        suv
21   r        suv
22   r        suv
23   r        suv
24   p    2seater
25   p    2seater
26   p    2seater
27   p    2seater
28   p    2seater
29   r        suv
30   e        suv
31   r        suv
32   d        suv
33   r    midsize
34   r    midsize
35   r    midsize
36   r    midsize
37   r    midsize
38   r    minivan
39   r    minivan
40   r    minivan
41   r    minivan
42   r    minivan
43   r    minivan
44   e    minivan
45   r    minivan
46   r    minivan
47   r    minivan
48   r    minivan
49   r     pickup
50   r     pickup
51   r     pickup
52   r     pickup
53   r     pickup
54   r     pickup
55   e     pickup
56   r     pickup
57   r     pickup
58   r        suv
59   r        suv
60   e        suv
61   r        suv
62   r        suv
63   r        suv
64   r        suv
65   r     pickup
66   e     pickup
67   r     pickup
68   r     pickup
69   r     pickup
70   e     pickup
71   r     pickup
72   r     pickup
73   r     pickup
74   r     pickup
75   r        suv
76   r        suv
77   r        suv
78   r        suv
79   r        suv
80   r        suv
81   r        suv
82   r        suv
83   r        suv
84   r     pickup
85   r     pickup
86   r     pickup
87   r     pickup
88   r     pickup
89   r     pickup
90   r     pickup
91   r subcompact
92   r subcompact
93   r subcompact
94   r subcompact
95   r subcompact
96   r subcompact
97   r subcompact
98   r subcompact
99   p subcompact
100  r subcompact
101  r subcompact
102  r subcompact
103  p subcompact
104  r subcompact
105  r subcompact
106  r subcompact
107  c subcompact
108  p subcompact
109  r    midsize
110  r    midsize
111  r    midsize
112  r    midsize
113  r    midsize
114  r    midsize
115  r    midsize
116  r subcompact
117  r subcompact
118  r subcompact
119  r subcompact
120  r subcompact
121  r subcompact
122  r subcompact
123  d        suv
124  r        suv
125  r        suv
126  r        suv
127  e        suv
128  r        suv
129  r        suv
130  p        suv
131  p        suv
132  r        suv
133  r        suv
134  p        suv
135  r        suv
136  p        suv
137  r        suv
138  r        suv
139  r        suv
140  r        suv
141  r        suv
142  r    compact
143  r    compact
144  r    midsize
145  r    midsize
146  p    midsize
147  p    midsize
148  r    midsize
149  r    midsize
150  p    midsize
151  r        suv
152  r        suv
153  p        suv
154  p        suv
155  r    midsize
156  p    midsize
157  r    midsize
158  r    midsize
159  p    midsize
160  r        suv
161  r        suv
162  r        suv
163  p        suv
164  r        suv
165  p        suv
166  r subcompact
167  r subcompact
168  r subcompact
169  r subcompact
170  p    compact
171  r    compact
172  p    compact
173  r    compact
174  r        suv
175  r        suv
176  r        suv
177  r        suv
178  r        suv
179  r        suv
180  r    midsize
181  r    midsize
182  r    midsize
183  r    midsize
184  r    midsize
185  r    midsize
186  r    midsize
187  r    compact
188  r    compact
189  r    compact
190  r    compact
191  r    compact
192  r    compact
193  r    compact
194  r    compact
195  r    compact
196  r    compact
197  r    compact
198  r    compact
199  r        suv
200  r        suv
201  r     pickup
202  r     pickup
203  r     pickup
204  r     pickup
205  r     pickup
206  r     pickup
207  r     pickup
208  r    compact
209  r    compact
210  p    compact
211  p    compact
212  r    compact
213  d    compact
214  r    compact
215  r    compact
216  p    compact
217  p    compact
218  r    compact
219  r    compact
220  r    compact
221  r    compact
222  d subcompact
223  d subcompact
224  r subcompact
225  r subcompact
226  r subcompact
227  r subcompact
228  p    midsize
229  p    midsize
230  p    midsize
231  p    midsize
232  p    midsize
233  p    midsize
234  p    midsize

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Type table(airquality$Month) at the command prompt.

> table(airquality$Month)

 5  6  7  8  9 
31 30 31 31 30 

| You are really on a roll!


  |                                                                            
  |================                                                      |  23%
| We see that the data covers 5 months, May through September. We'll want a
| boxplot of ozone as a function of the month in which the measurements were
| taken so we'll use the R formula Ozone~Month as the first argument of
| boxplot. Our second argument will be airquality, the dataset from which the
| variables of the first argument are taken.  Try this now.

> boxplot(Ozone~Month, dairquality)
Error in eval(m$data, parent.frame()) : object 'dairquality' not found
> boxplot(Ozone~Month, airquality)

| You are doing so well!


  |                                                                            
  |=================                                                     |  24%
| Note that boxplot, unlike hist, did NOT specify a title and axis labels for
| you automatically.

...


  |                                                                            
  |==================                                                    |  26%
| Let's call boxplot again to specify labels. (Use the up arrow to recover the
| previous command and save yourself some typing.) We'll add more arguments to
| the call to specify labels for the 2 axes. Set xlab equal to "Month" and ylab
| equal to "Ozone (ppb)". Specify col.axis equal to "blue" and col.lab equal to
| "red". Try this now.

> boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")

| All that practice is paying off!


  |                                                                            
  |===================                                                   |  27%
| Nice colors, but still no title. Let's add one with the R command title. Use the argument main set equal
| to the string "Ozone and Wind in New York City".

> title(main="Ozone and Wind in New Your City")

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| Type title(main="Ozone and Wind in New York City") at the command prompt.

> title(main="Ozone and Wind in New York City")

| All that hard work is paying off!


  |                                                                            
  |====================                                                  |  29%
| Now we'll show you how to plot a simple two-dimensional scatterplot using the R function plot. We'll show
| the relationship between Wind (x-axis) and Ozone (y-axis). We'll use the function plot with those two
| arguments (Wind and Ozone, in that order). To save some typing, though, we'll call the R command with
| using 2 arguments. The first argument of with will be airquality, the dataset containing Wind and Ozone;
| the second argument will be the call to plot. Doing this allows us to avoid using the longer notation,
| e.g., airquality$Wind. Try this now.

> with(airquality, plot(Wind, Ozone))

| That's the answer I was looking for.


  |                                                                            
  |=====================                                                 |  30%
| Note that plot generated labels for the x and y axes but no title.

...


  |                                                                            
  |======================                                                |  32%
| Add one now with the R command title. Use the argument main set equal to the string "Ozone and Wind in New
| York City". (You can use the up arrow to recover the command if you don't want to type it.)

> title(main="Ozone and Wind in New")

| Almost! Try again. Or, type info() for more options.

| Type title(main="Ozone and Wind in New York City") at the command prompt.

> | York City
Error: unexpected '|' in "|"
> title(main="Ozone and Wind in New")

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type title(main="Ozone and Wind in New York City") at the command prompt.

> 
> title(main="Ozone and Wind in New York City")

| All that hard work is paying off!


  |                                                                            
  |=======================                                               |  33%
| The basic plotting parameters are documented in the R help page for the function par. You can use par to
| set parameters OR to find out what values are already set. To see just how much flexibility you have, run
| the R command length with the argument par() now.

> length(par())
[1] 72

| You're the best!


  |                                                                            
  |========================                                              |  35%
| So there are a boatload (72) of parameters that par() gives you access to. Run the R function names with
| par() as its argument to see what these parameters are.

> nmaes(par())
Error in nmaes(par()) : could not find function "nmaes"
> names(par())
 [1] "xlog"      "ylog"      "adj"       "ann"       "ask"       "bg"        "bty"       "cex"      
 [9] "cex.axis"  "cex.lab"   "cex.main"  "cex.sub"   "cin"       "col"       "col.axis"  "col.lab"  
[17] "col.main"  "col.sub"   "cra"       "crt"       "csi"       "cxy"       "din"       "err"      
[25] "family"    "fg"        "fig"       "fin"       "font"      "font.axis" "font.lab"  "font.main"
[33] "font.sub"  "lab"       "las"       "lend"      "lheight"   "ljoin"     "lmitre"    "lty"      
[41] "lwd"       "mai"       "mar"       "mex"       "mfcol"     "mfg"       "mfrow"     "mgp"      
[49] "mkh"       "new"       "oma"       "omd"       "omi"       "page"      "pch"       "pin"      
[57] "plt"       "ps"        "pty"       "smo"       "srt"       "tck"       "tcl"       "usr"      
[65] "xaxp"      "xaxs"      "xaxt"      "xpd"       "yaxp"      "yaxs"      "yaxt"      "ylbias"   

| You nailed it! Good job!


  |                                                                            
  |=========================                                             |  36%
| Variety is the spice of life. You might recognize some of these such as col and lwd from previous swirl
| lessons. You can always run ?par to see what they do. For now, run the command par()$pin and see what you
| get.

> par()$pin
[1] 4.499583 3.889167

| Nice work!


  |                                                                            
  |===========================                                           |  38%
| Alternatively, you could have gotten the same result by running par("pin") or par('pin')).  What do you
| think these two numbers represent?

1: Coordinates of the center of the plot window
2: Plot dimensions in inches
3: Random numbers
4: A confidence interval

Selection: 1

| Nice try, but that's not exactly what I was hoping for. Try again.

| The function par specifies graphical parameters so the answer should deal with plots. That leaves two
| choices. The 'in' in 'pin' specifies inches.

1: Plot dimensions in inches
2: Coordinates of the center of the plot window
3: Random numbers
4: A confidence interval

Selection: 1

| That's the answer I was looking for.


  |                                                                            
  |============================                                          |  39%
| Now, run the command par("fg") or or par('fg') or par()$fg and see what you get.

> par("fg")
[1] "black"

| All that practice is paying off!


  |                                                                            
  |=============================                                         |  41%
| It gave you a color, right? Since par()$fg specifies foreground color, what do you think par()$bg
| specifies?

1: Background color
2: blue-green
3: Better color
4: Beautiful color

Selection: 1

| You got it!


  |                                                                            
  |==============================                                        |  42%
| Many base plotting functions share a set of parameters. We'll go through some of the more commonly used
| ones now. See if you can tell what they do from their names.

...


  |                                                                            
  |===============================                                       |  44%
| What do you think the graphical parameter pch controls?

1: picture characteristics
2: plot character
3: pc help
4: point control height

Selection: 2

| You're the best!


  |                                                                            
  |================================                                      |  45%
| The plot character default is the open circle, but it "can either be a single character or an integer code
| for one of a set of graphics symbols." Run the command par("pch") to see the integer value of the default.
| When you need to, you can use R's Documentation (?pch) to find what the other values mean.

> ?pch
starting httpd help server ... done
> 
> par("pch")
[1] 1

| That's the answer I was looking for.


  |                                                                            
  |=================================                                     |  47%
| So 1 is the code for the open circle. What do you think the graphical parameters lty and lwd control
| respectively?

1: line type and width
2: line slope and intercept
3: line length and width
4: line width and type

Selection: 1

| Perseverance, that's the answer.


  |                                                                            
  |==================================                                    |  48%
| Run the command par("lty") to see the default line type.

> par("lty")
[1] "solid"

| You got it!


  |                                                                            
  |===================================                                   |  50%
| So the default line type is solid, but it can be dashed, dotted, etc. Once again, R's ?par documentation
| will tell you what other line types are available. The line width is a positive integer; the default value
| is 1.

...


  |                                                                            
  |====================================                                  |  52%
| We've seen a lot of examples of col, the plotting color, specified as a number, string, or hex code; the
| colors() function gives you a vector of colors by name.

...


  |                                                                            
  |=====================================                                 |  53%
| What do you think the graphical parameters xlab and ylab control respectively?

1: labels for the x- and y- axes
2: labels for the y- and x- axes

Selection: 1

| Great job!


  |                                                                            
  |======================================                                |  55%
| The par() function is used to specify global graphics parameters that affect all plots in an R session.
| (Use dev.off or plot.new to reset to the defaults.) These parameters can be overridden when specified as
| arguments to specific plotting functions. These include las (the orientation of the axis labels on the
| plot), bg (background color), mar (margin size), oma (outer margin size), mfrow and mfcol (number of plots
| per row, column).

...


  |                                                                            
  |=======================================                               |  56%
| The last two, mfrow and mfcol, both deal with multiple plots in that they specify the number of plots per
| row and column. The difference between them is the order in which they fill the plot matrix. The call
| mfrow will fill the rows first while mfcol fills the columns first.

...


  |                                                                            
  |========================================                              |  58%
| So to reiterate, first call a basic plotting routine. For instance, plot makes a scatterplot or other type
| of plot depending on the class of the object being plotted.

...


  |                                                                            
  |=========================================                             |  59%
| As we've seen, R provides several annotating functions. Which of the following is NOT one of them?

1: hist
2: points
3: lines
4: text
5: title

Selection: 1

| You are amazing!


  |                                                                            
  |==========================================                            |  61%
| So you can add text, title, points, and lines to an existing plot. To add lines, you give a vector of x
| values and a corresponding vector of y values (or a 2-column matrix); the function lines just connects the
| dots. The function text adds text labels to a plot using specified x, y coordinates.

...


  |                                                                            
  |===========================================                           |  62%
| The function title adds annotations. These include x- and y- axis labels, title, subtitle, and outer
| margin. Two other annotating functions are mtext which adds arbitrary text to either the outer or inner
| margins of the plot and axis which adds axis ticks and labels. Another useful function is legend which
| explains to the reader what the symbols your plot uses mean.

...


  |                                                                            
  |=============================================                         |  64%
| Before we close, let's test your ability to make a somewhat complicated scatterplot. First run plot with 3
| arguments. airquality$Wind, airquality$Ozone, and type set equal to "n". This tells R to set up the plot
| but not to put the data in it.

> plot(airquality$Wind, airquality$Ozone, type="n")

| Your dedication is inspiring!


  |                                                                            
  |==============================================                        |  65%
| Now for the test. (You might need to check R's documentation for some of these.) Add a title with the
| argument main set equal to the string "Wind and Ozone in NYC"

> title(main="Wind and Ozone in NYC")

| Excellent job!


  |                                                                            
  |===============================================                       |  67%
| Now create a variable called may by subsetting airquality appropriately. (Recall that the data specifies
| months by number and May is the fifth month of the year.)

> may <- sunset(airquality, Month==5)
Error in sunset(airquality, Month == 5) : 
  could not find function "sunset"
> may <- subset(airquality, Month==5)

| Excellent job!


  |                                                                            
  |================================================                      |  68%
| Now use the R command points to plot May's wind and ozone (in that order) as solid blue triangles. You
| have to set the color and plot character with two separate arguments. Note we use points because we're
| adding to an existing plot.

> plot(may$Wind, ?plot

+ > 
> ?plot
> plot(may$Wind, lty=1,pch=17, col="blue")

| Not exactly. Give it another go. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Ozone, lty=1, pch=17, col="blue")

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> plot(may$Wind, pch=17, col="blue")

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Ozone, pch=17, col="blue")

| You almost had it, but not quite. Try again. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Wind, lty=1,pch=17, col="blue")

| Keep trying! Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Ozone, pch=17, col="blue")

| Give it another try. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Ozone, col="blue", pch=17)

| Keep trying! Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Ozone, col="blue", pch=17)

| Almost! Try again. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> points(may$Wind, col="blue", pch=17)

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> skip
function () 
{
    invisible()
}
<bytecode: 0x0000000008e1cdf8>
<environment: namespace:swirl>

| Not quite! Try again. Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the
| prompt should work.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> skip()

| Entering the following correct answer for you...

> points(may$Wind,may$Ozone,col="blue",pch=17)

| Nice work!


  |                                                                            
  |=================================================                     |  70%
| Now create the variable notmay by subsetting airquality appropriately.

> notmay <- sunset(airquality, Month!=5)
Error in sunset(airquality, Month != 5) : 
  could not find function "sunset"
> notmay <- subset(airquality, Month!=5)

| Excellent work!


  |                                                                            
  |==================================================                    |  71%
| Now use the R command points to plot these notmay's wind and ozone (in that order) as red snowflakes.

> points(notmay$Wind, col="blue", pch=17)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The code for snowflakes is 8 so typing points(notmay$Wind,notmay$Ozone,col="red",pch=8) at the prompt
| should work.

> points(notmay$Ozone, col="blue", pch=17)

| Keep trying! Or, type info() for more options.

| The code for snowflakes is 8 so typing points(notmay$Wind,notmay$Ozone,col="red",pch=8) at the prompt
| should work.

> points(notmay$Wind, col="red", pch=8)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The code for snowflakes is 8 so typing points(notmay$Wind,notmay$Ozone,col="red",pch=8) at the prompt
| should work.

> points(notmay$Ozone, col="red", pch=8)

| You're close...I can feel it! Try it again. Or, type info() for more options.

| The code for snowflakes is 8 so typing points(notmay$Wind,notmay$Ozone,col="red",pch=8) at the prompt
| should work.

> skip()

| Entering the following correct answer for you...

> points(notmay$Wind,notmay$Ozone,col="red",pch=8)

| All that practice is paying off!


  |                                                                            
  |===================================================                   |  73%
| Now we'll use the R command legend to clarify the plot and explain what it means. The function has a lot
| of arguments, but we'll only use 4. The first will be the string "topright" to tell R where to put the
| legend. The remaining 3 arguments will each be 2-long vectors created by R's concatenate function, e.g.,
| c(). These arguments are pch, col, and legend. The first is the vector (17,8), the second ("blue","red"),
| and the third ("May","Other Months"). Try it now.

> legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))

| Great job!


  |                                                                            
  |====================================================                  |  74%
| Now add a vertical line at the median of airquality$Wind. Make it dashed (lty=2) with a width of 2.

> abline(v=median(airquality$Wind), lty=2), lwd=2)
Error: unexpected ',' in "abline(v=median(airquality$Wind), lty=2),"
> abline(v=median(airquality$Wind), lty=2, lwd=2)

| Excellent work!


  |                                                                            
  |=====================================================                 |  76%
| Use par with the parameter mfrow set equal to the vector (1,2) to set up the plot window for two plots
| side by side. You won't see a result.

> par(mfrow=c(1,2))

| That's a job well done!


  |                                                                            
  |======================================================                |  77%
| Now plot airquality$Wind and airquality$Ozone and use main to specify the title "Ozone and Wind".

> plot(airquality$Wind)

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone ands Wind")

| One more time. You can do it! Or, type info() for more options.

| Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone ands Wind")

| Not quite! Try again. Or, type info() for more options.

| Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone ands Wind")

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Your dedication is inspiring!


  |                                                                            
  |=======================================================               |  79%
| Now for the second plot.

...


  |                                                                            
  |========================================================              |  80%
| Plot airquality$Ozone and airquality$Solar.R and use main to specify the title "Ozone and Solar
| Radiation".

> plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar")

| Not quite! Try again. Or, type info() for more options.

| Type plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").

> plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Not exactly. Give it another go. Or, type info() for more options.

| Type plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").

> plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")

| You are doing so well!


  |                                                                            
  |=========================================================             |  82%
| Now for something more challenging.

...


  |                                                                            
  |==========================================================            |  83%
| This one with 3 plots, to illustrate inner and outer margins. First, set up the plot window by typing
| par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))

> par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))

| Nice work!


  |                                                                            
  |===========================================================           |  85%
| Margins are specified as 4-long vectors of integers. Each number tells how many lines of text to leave at
| each side. The numbers are assigned clockwise starting at the bottom. The default for the inner margin is
| c(5.1, 4.1, 4.1, 2.1) so you can see we reduced each of these so we'll have room for some outer text.

...


  |                                                                            
  |============================================================          |  86%
| The first plot should be familiar. Plot airquality$Wind and airquality$Ozone with the title (argument
| main) as "Ozone and Wind".

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| You are amazing!


  |                                                                            
  |==============================================================        |  88%
| The second plot is similar.

...


  |                                                                            
  |===============================================================       |  89%
| Plot airquality$Solar.R and airquality$Ozone with the title (argument main) as "Ozone and Solar
| Radiation".

> plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Almost! Try again. Or, type info() for more options.

| Type plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation").

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation").

> plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")

| Your dedication is inspiring!


  |                                                                            
  |================================================================      |  91%
| Now for the final panel.

...


  |                                                                            
  |=================================================================     |  92%
| Plot airquality$Temp and airquality$Ozone with the title (argument main) as "Ozone and Temperature".

> plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")

| That's a job well done!


  |                                                                            
  |==================================================================    |  94%
| Now we'll put in a title.

...


  |                                                                            
  |===================================================================   |  95%
| Since this is the main title, we specify it with the R command mtext. Call mtext with the string "Ozone
| and Weather in New York City" and the argument outer set equal to TRUE.

> mtext("Ozone and Weather in New York City", outer=TRUE)

| You are doing so well!


  |                                                                            
  |====================================================================  |  97%
| Voila! Beautiful, right?

...


  |                                                                            
  |===================================================================== |  98%
| Congrats! You've weathered this lesson nicely and passed out of the No!zone.

...


  |                                                                            
  |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? daniel.drennan@athora.com
What is your assignment token? nLU1d3ZdTDOgAdv4
Grade submission succeeded!

| That's correct!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: Exploratory Data Analysis
2: Take me to the swirl course repository!

Selection: 0

| Leaving swirl now. Type swirl() to resume.

> quit()
> 
