##
## args() handy
##

args(list.files)

# function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
#     recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
#     no.. = FALSE) 
# NULL

## seq()

seq(0, 10, by=0.5)
# [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5
# [15]  7.0  7.5  8.0  8.5  9.0  9.5 10.0

 seq(5, 10, length=30)
# [1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483
# [8]  6.206897  6.379310  6.551724  6.724138  6.896552  7.068966  7.241379
# [15]  7.413793  7.586207  7.758621  7.931034  8.103448  8.275862  8.448276
# [22]  8.620690  8.793103  8.965517  9.137931  9.310345  9.482759  9.655172
# [29]  9.827586 10.000000

my_seq <- seq(5, 10, length=30)

length(my_seq)
# 30

1:length(my_seq)
#  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
# [24] 24 25 26 27 28 29 30

seq(along.with = my_seq)
#  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
# [24] 24 25 26 27 28 29 30

# r has a build in handy function for this
seq_along(my_seq)
#  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
# [24] 24 25 26 27 28 29 30


## rep()

rep(0, times = 40)
#  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# [36] 0 0 0 0 0

# repear a sequence
rep(c(0, 1, 2), times = 10)
#  [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2


 rep(c(0, 1, 2), each = 10)
 # [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2


paste(1:3, c("X", "Y", "Z"), sep = "")
# [1] "1X" "2Y" "3Z"

paste(LETTERS, 1:4, sep = "-")
#  [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3"
# [12] "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2"
# [23] "W-3" "X-4" "Y-1" "Z-2"


y <- rnorm(1000)
z <- rep(NA, 1000)

my_data <- sample(c(y, z), 100)

my_na <- is.na(my_data)


x[!is.na(x) & x > 0]

x[c(-2, -10)] # return all elemens except ones at index 2 and 10

x[-c(2, 10)] # is a shorthand and does the same thing

# naming elements

vect <- c(foo = 11, bar = 2, norf = NA)

names(vect)
# [1] "foo"  "bar"  "norf"

vect2 <- c(11, 2, NA)                        # unnamed vector
names(vect2) <- c("foo", "bar", "norf")     # adding names

identical(vect, vect2)
# [1] TRUE

vect["bar"]
# bar 
#  2 


vect[c("foo", "bar")]
# foo bar 
#  11   2 



##
## matrices and data frames
##

my_vector <- 1:20
my_vector
#  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

dim(my_vector)
# NULL

length(my_vector)
# [1] 20

# ===========                                                      |  17%
# Ah! That's what we wanted. But, what happens if we give my_vector a
# `dim` attribute? Let's give it a try. Type dim(my_vector) <- c(4, 5).

dim(my_vector) <- c(4, 5)

 dim(my_vector)
# [1] 4 5

attributes(my_vector)
# $dim
# [1] 4 5

my_vector
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    1    5    9   13   17
# [2,]    2    6   10   14   18
# [3,]    3    7   11   15   19
# [4,]    4    8   12   16   20


# it's now a matrix
class(my_vector)
# [1] "matrix" "array"

my_matrix2 <- my_vector # copy to new variable
 
# create another matric similar
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)

identical(my_matrix, my_matrix2)
# TRUE

patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
#     patients                       
# [1,] "Bill"   "1" "5" "9"  "13" "17"
# [2,] "Gina"   "2" "6" "10" "14" "18"
# [3,] "Kelly"  "3" "7" "11" "15" "19"
# [4,] "Sean"   "4" "8" "12" "16" "20"

# This is called 'implicit coercion', because we didn't ask for it. 

# the solution

my_data <- data.frame(patients, my_matrix)

my_data
#   patients X1 X2 X3 X4 X5
# 1     Bill  1  5  9 13 17
# 2     Gina  2  6 10 14 18
# 3    Kelly  3  7 11 15 19
# 4     Sean  4  8 12 16 20

# class(my_data)
# [1] "data.frame"

names <- c("patient", "age", "weight", "bp", "rating", "test")

colnames(my_data) <- cnames

my_data
#   patient age weight bp rating test
# 1    Bill   1      5  9     13   17
# 2    Gina   2      6 10     14   18
# 3   Kelly   3      7 11     15   19
# 4    Sean   4      8 12     16   20

